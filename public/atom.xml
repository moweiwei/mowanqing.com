<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just.Upward</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-14T05:57:32.266Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>map 到底改不改变原数组</title>
    <link href="http://example.com/2022/01/14/3/"/>
    <id>http://example.com/2022/01/14/3/</id>
    <published>2022-01-14T05:53:44.000Z</published>
    <updated>2022-01-14T05:57:32.266Z</updated>
    
    <content type="html"><![CDATA[<p>map 到底改不改变原数组</p><p>一般认为 map 不会对原数组进行修改，但事实并不是如此。</p><h2 id="数组内为基础类型数据时-原数组不变"><a href="#数组内为基础类型数据时-原数组不变" class="headerlink" title="数组内为基础类型数据时,原数组不变"></a>数组内为基础类型数据时,原数组不变</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [1,2,3,4,5]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[2, 4, 6, 8, 10]</span><br></code></pre></div></td></tr></table></figure><h2 id="数据内是引用类型数据时，注意写法"><a href="#数据内是引用类型数据时，注意写法" class="headerlink" title="数据内是引用类型数据时，注意写法"></a>数据内是引用类型数据时，注意写法</h2><ol><li><p>item 上直接修改，改变原数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;James&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;<br>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  item.like = <span class="hljs-string">&quot;eat&quot;</span>;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br></code></pre></div></td></tr></table></figure></li><li><p>开辟新的引用地址, 不改变原数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;James&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;<br>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> obj = &#123; ...item, <span class="hljs-attr">like</span>: <span class="hljs-string">&quot;eat&quot;</span> &#125;;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [&#123; name: &#x27;Anna&#x27;, age: 16&#125;,&#123; name: &#x27;James&#x27;, age: 18&#125;]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;map 到底改不改变原数组&lt;/p&gt;
&lt;p&gt;一般认为 map 不会对原数组进行修改，但事实并不是如此。&lt;/p&gt;
&lt;h2 id=&quot;数组内为基础类型数据时-原数组不变&quot;&gt;&lt;a href=&quot;#数组内为基础类型数据时-原数组不变&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="map" scheme="http://example.com/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>如何在 class 组件中使用 hooks</title>
    <link href="http://example.com/2022/01/14/2/"/>
    <id>http://example.com/2022/01/14/2/</id>
    <published>2022-01-14T03:03:28.000Z</published>
    <updated>2022-01-14T05:57:32.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>以一个简单的 <code>useScreenWidthhook</code> 函数为例，它的目的是获取全屏的宽度，并且去监听浏览器窗口的变化，更新宽度：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useScreenWidth</span>(<span class="hljs-params"></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> [width, setWidth] = useState(<span class="hljs-built_in">window</span>.innerWidth);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-function">(<span class="hljs-params">event: any</span>) =&gt;</span> &#123;<br>      setWidth(event.target.innerWidth);<br>    &#125;;<br>    <span class="hljs-comment">// 监听浏览器窗口变化</span><br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>, handler);<br>    <span class="hljs-comment">// 组件unmount时要解除监听</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&quot;resize&quot;</span>, handler);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> width;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="方法-1：将-Hook-包装成-HOC"><a href="#方法-1：将-Hook-包装成-HOC" class="headerlink" title="方法 1：将 Hook 包装成 HOC"></a>方法 1：将 Hook 包装成 HOC</h2><p>HOC 是 React 中复用组件的高级用法，它的本质是一个函数，它的输入参数是一个组件，返回相同的组件以及一些额外的 props。在我们的例子里，可以让 hook 函数作为 props 传递到目标组件中:</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../hooks/useScreenWidth&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> withHooksHOC = <span class="hljs-function">(<span class="hljs-params">Component: any</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">props: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> screenWidth = useScreenWidth();<br><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;screenWidth&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>;<br>  &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>将我们的目标组件用上述的 withHooksHOC 包装起来</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; withHooksHOC &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./withHooksHOC&quot;</span>;<br><br>interface IHooksHOCProps &#123;<br>  <span class="hljs-attr">width</span>: number;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HooksHOC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">IHooksHOCProps</span>&gt; </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>width: &#123;this.props.width&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withHooksHOC(HooksHOC);<br></code></pre></div></td></tr></table></figure><h2 id="方法-2：将-Hook-包装成函数组件"><a href="#方法-2：将-Hook-包装成函数组件" class="headerlink" title="方法 2：将 Hook 包装成函数组件"></a>方法 2：将 Hook 包装成函数组件</h2><p>将 hook 变成函数组件，它接收一个参数为 width 的 children 函数，然后将 width 作为 render prop 传递：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; FunctionComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../hooks/useScreenWidth&quot;</span>;<br><br>type ScreenWidthChildren = <span class="hljs-function">(<span class="hljs-params">screenWidth: number</span>) =&gt;</span> React.ReactNode;<br><br>interface IScreenWidthProps &#123;<br>  <span class="hljs-attr">children</span>: ScreenWidthChildren;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ScreenWidth: FunctionComponent&lt;IScreenWidthProps&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; children &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> screenWidth: number = useScreenWidth();<br><br>  <span class="hljs-keyword">return</span> children(screenWidth);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>使用：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./ScreenWidth&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HooksRenderProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScreenWidth</span>&gt;</span>&#123;(width) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span> &quot;<span class="hljs-attr">48px</span>&quot; &#125;&#125;&gt;</span>width: &#123;width&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ScreenWidth</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;以一个简单的 &lt;code&gt;useScreenWidthhook&lt;/code&gt; 函数为例，它的目的是获取全屏的宽度，并且去监听</summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="HooK" scheme="http://example.com/tags/HooK/"/>
    
  </entry>
  
  <entry>
    <title>useState 引用类型数据更新不触发重新渲染问题</title>
    <link href="http://example.com/2022/01/14/1/"/>
    <id>http://example.com/2022/01/14/1/</id>
    <published>2022-01-14T02:24:50.000Z</published>
    <updated>2022-01-14T02:37:25.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="useState-函数式更新"><a href="#useState-函数式更新" class="headerlink" title="useState 函数式更新"></a>useState 函数式更新</h2><p>与 class 组件中的 setState 方法不同，useState 不会自动合并更新对象。你可以用函数式的 setState 结合展开运算符来达到合并更新对象的效果。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, setState] = useState(&#123;&#125;);<br>setState(<span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 也可以使用 Object.assign</span><br>  <span class="hljs-keyword">return</span> &#123; ...prevState, ...updatedValues &#125;;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="引用类型-state-更新"><a href="#引用类型-state-更新" class="headerlink" title="引用类型 state 更新"></a>引用类型 state 更新</h2><p>经常 state 数据不是简单数据类型(值类型)，而是数组、对象之类(引用类型).而 React 组件的更新机制对 state 只进行浅对比，也就是更新某个复杂类型数据时只要它的引用地址没变，那就不会重新渲染组件。</p><p>尤其当被更新的引用类型数据需要依赖之前的数据时，容易踩坑,不触发更新。更新复杂 state 的时候必须传给它一个全新的对象，而不是复制了它引用地址再修改的对象。</p><p>两种解决办法：</p><ol><li><p>结合展开运算符返回一个新对象</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextValue</span>(<span class="hljs-params">preValue</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ipValue = <span class="hljs-built_in">Number</span>.parseInt(newVal, <span class="hljs-number">10</span>);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.isNaN(ipValue)) &#123;<br>    ipValue = <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &lt; <span class="hljs-number">0</span>) &#123;<br>    ipValue = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &gt; <span class="hljs-number">255</span>) &#123;<br>    ipValue = <span class="hljs-number">255</span>;<br>  &#125;<br>  preValue[index] = ipValue; <span class="hljs-comment">//这里数据引用地址的值同样被修改</span><br>  <span class="hljs-keyword">return</span> [...preValue]; <span class="hljs-comment">// 数据最外层的引用地址不同即可触发组件更新</span><br>&#125;<br><br>setValue(<span class="hljs-function">(<span class="hljs-params">preValue</span>) =&gt;</span> nextValue(preValue));<br></code></pre></div></td></tr></table></figure></li><li><p>深拷贝对象，用全新的副本更新数据。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextValue</span>(<span class="hljs-params">preValue</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> newValue = _.cloneDeep(preValue);<br>  <span class="hljs-keyword">let</span> ipValue = <span class="hljs-built_in">Number</span>.parseInt(newVal, <span class="hljs-number">10</span>);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.isNaN(ipValue)) &#123;<br>    ipValue = <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &lt; <span class="hljs-number">0</span>) &#123;<br>    ipValue = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &gt; <span class="hljs-number">255</span>) &#123;<br>    ipValue = <span class="hljs-number">255</span>;<br>  &#125;<br>  newValue[index] = ipValue; <span class="hljs-comment">//这里数据引用地址的值同样被修改</span><br>  <span class="hljs-keyword">return</span> newValue; <span class="hljs-comment">// 数据最外层的引用地址不同即可触发组件更新</span><br>&#125;<br><br>setValue(<span class="hljs-function">(<span class="hljs-params">preValue</span>) =&gt;</span> nextValue(preValue));<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;useState-函数式更新&quot;&gt;&lt;a href=&quot;#useState-函数式更新&quot; class=&quot;headerlink&quot; title=&quot;useState 函数式更新&quot;&gt;&lt;/a&gt;useState 函数式更新&lt;/h2&gt;&lt;p&gt;与 class 组件中的 setState </summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="HooK" scheme="http://example.com/tags/HooK/"/>
    
  </entry>
  
  <entry>
    <title>使用 useRef 跨生命周期保存变量</title>
    <link href="http://example.com/2022/01/13/1/"/>
    <id>http://example.com/2022/01/13/1/</id>
    <published>2022-01-13T07:23:54.000Z</published>
    <updated>2022-01-14T02:37:59.106Z</updated>
    
    <content type="html"><![CDATA[<p>ref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.</p><p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p><h2 id="场景-1：只在更新时运行-useEffect"><a href="#场景-1：只在更新时运行-useEffect" class="headerlink" title="场景 1：只在更新时运行 useEffect"></a>场景 1：只在更新时运行 useEffect</h2><p>使用一个可变的 ref 手动存储一个布尔值来表示是首次渲染还是后续渲染.</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> prevCountRef = useRef(<span class="hljs-literal">false</span>);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (prevCountRef.current) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;只在更新时候执行&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;首次渲染执行&quot;</span>);<br>      prevCountRef.current = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>抽成自定义 hook：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> update = useUpdate();<br>  <span class="hljs-built_in">console</span>.log(update, <span class="hljs-string">&quot;是否更新&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useUpdate</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ref = useRef(<span class="hljs-literal">false</span>);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.current = <span class="hljs-literal">true</span>;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="场景-2：获取上一轮的-props-或-state"><a href="#场景-2：获取上一轮的-props-或-state" class="headerlink" title="场景 2：获取上一轮的 props 或 state"></a>场景 2：获取上一轮的 props 或 state</h2><p>为什么 ref.current 拿到是上次的值？原因：</p><ol><li>useEffect 很重要的一点是：它是在每次渲染之后才会触发的，是延迟执行的。</li><li>return 语句是同步的，所以 return 的时候，ref.current 还是旧值。</li><li>以下代码的执行顺序是 1 3 2</li></ol><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> prevCountRef = useRef();<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1&quot;</span>, count);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;2.&quot;</span>, count);<br>    prevCountRef.current = count;<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> prevCount = prevCountRef.current;<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`3.之前的状态: <span class="hljs-subst">$&#123;prevCount&#125;</span>;现在状态: <span class="hljs-subst">$&#123;count&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>抽取成自定义 Hook:</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">usePrevious</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ref = useRef();<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.current = value;<br>  &#125;, [value]);<br><br>  <span class="hljs-keyword">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="场景-3：-解决-hooks-时，由于异步闭包无法获取最新-state-的问题"><a href="#场景-3：-解决-hooks-时，由于异步闭包无法获取最新-state-的问题" class="headerlink" title="场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题"></a>场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题</h2><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> RefComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 使用 useState 存放和改变展示的 number</span><br>  <span class="hljs-keyword">const</span> [number, setNumber] = useState(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 使用 useRef 生成一个独立的 ref 对象</span><br>  <span class="hljs-comment">// 在它的 current 属性单独存放一个展示的 number, 初始值为 0</span><br>  <span class="hljs-keyword">const</span> numRef = useRef(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incrementAndDelayLogging</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 点击按钮 number + 1</span><br>    setNumber(number + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 同时 ref 对象的 current 属性值也 + 1</span><br>    numRef.current++;<br>    <span class="hljs-comment">// 定时器函数中产生了闭包, 这里 number 的是组件更新前的 number 对象, 所以值一直会滞后 1</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> alert(<span class="hljs-string">`state: <span class="hljs-subst">$&#123;number&#125;</span> | ref: <span class="hljs-subst">$&#123;numRef.current&#125;</span>`</span>), <span class="hljs-number">1000</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 直接渲染的组件是正常情况, 可以获取到最新的 state,</span><br>  <span class="hljs-comment">// 所以 ref.current 和 state 存储的值显示一致</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>solving closure by useRef<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;incrementAndDelayLogging&#125;</span>&gt;</span>alert in setTimeout<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>state: &#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>ref: &#123;numRef.current&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.&lt;/p&gt;
&lt;p&gt;当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引</summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="HooK" scheme="http://example.com/tags/HooK/"/>
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
</feed>
