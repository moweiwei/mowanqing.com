<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just.Upward</title>
  
  <subtitle>ddd</subtitle>
  <link href="http://mowanqing.com/atom.xml" rel="self"/>
  
  <link href="http://mowanqing.com/"/>
  <updated>2022-03-01T02:56:12.120Z</updated>
  <id>http://mowanqing.com/</id>
  
  <author>
    <name>Moweiwei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中高级前端工程师面试题</title>
    <link href="http://mowanqing.com/posts/a18c0ac9/"/>
    <id>http://mowanqing.com/posts/a18c0ac9/</id>
    <published>2022-02-15T02:39:21.000Z</published>
    <updated>2022-03-01T02:56:12.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>1、浏览器地址栏输入 URL 到页面打开的整个解析过程？</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>1、请你讲一下闭包?</p><blockquote><p>简单：闭包是有权限访问其他函数作用域内的变量的一个函数。</p><p>完整：由于在JS中，变量的作用域属于函数作用域，在函数执行后作用域就会被清理、内存也随之回收，但是由于闭包是建立在一个函数内部的子函数，由于其可访问上级作用域的原因，即使上级函数执行完，作用域也不会随之销毁，这时的子函数——也就是闭包，便拥有了访问上级作用域中的变量的权限，即使上级函数执行完后作用域内的值也不会被销毁。</p></blockquote><ul><li>闭包解决了什么？</li></ul><blockquote><p>由于闭包可以缓存上级作用域，那么就使得函数外部打破了“函数作用域”的束缚，可以访问函数内部的变量。以平时使用的Ajax成功回调为例，这里其实就是个闭包，由于上述的特性，回调就拥有了整个上级作用域的访问和操作能力，提高了极大的便利。开发者不用去写钩子函数来操作上级函数作用域内部的变量了。</p></blockquote><ul><li>闭包有哪些应用场景?</li></ul><blockquote><p>闭包随处可见，一个Ajax请求的成功回调，一个事件绑定的回调方法，一个setTimeout的延时回调，或者一个函数内部返回另一个匿名函数，这些都是闭包。简而言之，无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都有闭包的身影。</p></blockquote><p>2、介绍一下 JS 里面的原型？</p><blockquote><p>每个对象都有一个 prototype 属性，就是原型，是一个对象，叫原型对象。</p></blockquote><ul><li>原型的作用是什么？</li></ul><blockquote><p>共享方法</p></blockquote><ul><li>原型中this的指向是什么？</li></ul><blockquote><p>原型中this的指向是实例。</p></blockquote><ul><li>说一下平时开发使用到 prototype 的例子？</li></ul><p>3、如何理解 es6 class 中 constructor 方法？ 和 super的作用？</p><blockquote><p>constructor 方法是类的构造函数。<br>通过 new 命令创建对象实例时，自动调用该方法。<br>constructor 内定义的方法是 实例方法；class 内直接定义的方法是原型方法。</p><p>super…</p></blockquote><p>4、eventloop</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>1、介绍一下 Virtual DOM 的工作原理？</p><blockquote><p>Virtual DOM 是一个轻量级的 JavaScript 对象，它最初只是 real DOM 的副本。它是一个节点树，它将元素、它们的属性和内容作为对象及其属性。 React 的渲染函数从 React 组件中创建一个节点树。然后它响应数据模型中的变化来更新该树，该变化是由用户或系统完成的各种动作引起的。</p></blockquote><p>Virtual DOM 工作过程有三步：</p><ol><li>每当底层数据发生改变时，整个 UI 都将在 Virtual DOM 描述中重新渲染。</li><li>然后计算之前 DOM 表示与新表示的之间的差异。</li><li>完成计算后，将只用实际更改的内容更新 real DOM。</li></ol><p>2、react 里什么是高阶组件？使用高阶组件的场景？</p><blockquote><p>高阶组件(HOC)是接受一个组件并返回一个新组件的函数。</p></blockquote><p>3、React Hooks 解决了哪些问题？</p><blockquote><p>在组件之间复用状态逻辑很难;复杂组件变得难以理解</p></blockquote><p>4、说一下 useRef 有哪些用法？</p><blockquote><p>useRef 除了获取 dom，另一个用法：<br>保存数据，不造成 rerender<br>想要保存数据，又不想触发函数的更新，该数据的更新不会造成组件 rerender</p></blockquote><p>5、什么情况下使用 useCallback ？<br>子组件接收一个方法，避免子组件重复渲染</p><ul><li>react 中只要父组件的 render 了，那么默认情况下就会触发子组的 render，react 提供了来避免这种重渲染的性能开销的一些方法：React.PureComponent、React.memo ，shouldComponentUpdate()</li><li>使用 React.memo 避免子组件做没必要的渲染。</li><li>Reace.memo 只会对 props 做浅比较，也就是父组件重新 render 之后会传入 不同引用的方法 getList，浅比较之后不相等，导致子组件还是依然会渲染。</li><li>useCallback 缓存一个函数，当依赖没有改变的时候，会一直返回同一个引用</li></ul><p>6、useCallback 与 useMemo 作用用来缓存，两者的区别是什么？</p><blockquote><p>useMemo 缓存值；useCallback 缓存函数</p></blockquote><p>7、 react 项目里做过哪些性能优化？</p><p>代码层面：</p><ul><li>使用return null而不是CSS的display:none来控制节点的显示隐藏。保证同一时间页面的DOM节点尽可能的少。</li><li>props和state的数据尽可能简单明了，扁平化。</li><li>不要使用数组下标作为key</li><li>利用 shouldComponentUpdate 和 PureComponent 避免过多 render function</li><li>render里面尽量减少新建变量和bind函数，传递参数是尽量减少传递参数的数量。</li><li>尽量将 props 和 state 扁平化，只传递 component 需要的 props（传得太多，或者层次传得太深，都会加重shouldComponentUpdate里面的数据比较负担），慎将 component 当作 props 传入</li></ul><p>代码体积优化:</p><ul><li>使用 babel-plugin-import 优化业务组件的引入，实现按需加载</li><li>使用 生产版本</li><li>使用 SplitChunksPlugin 拆分公共代码</li><li>分析 CSS 和 JS 代码覆盖率</li><li>优化 Webpack 中的库</li><li>使用动态 import，懒加载 React 组件</li><li>使用 webpack-bundle-analyzer 可视化 webpack 输出文件的大小</li><li>使用动态 import，懒加载 React 组件</li><li>使用 Tree Shaking &amp; 教程 &amp; Tree Shaking 优化</li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>1、Vue 组件 data 为什么必须是函数？</p><blockquote><p>因为组件是可以复用的,JS 里对象是引用关系,如果组件 data 是一个对象,那么子组件中的 data 属性值会互相污染。<br>所以一个组件的 data 选项必须是一个函数,因此每个实例可以维护一份被返回对象的独立的拷贝。</p></blockquote><p>2、直接给一个数组项赋值，Vue 能检测到变化吗？</p><p>由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。</p><blockquote><p>Vue 不能检测到以下数组的变动:</p><p>1.当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue</p><p>2.当你修改数组的长度时，例如：vm.items.length = newLength</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">vm.$set(vm.items, indexOfItem, newValue)<br><br>vm.items.splice(newLength)<br></code></pre></div></td></tr></table></figure><ul><li>检测不到的原因是什么？</li></ul><blockquote><p>当读取 obj.title 和修改 obj.title 的时候被 defineProperty 拦截，但 defineProperty 对不存在的属性无法拦截，所以 Vue 2 中所有数据必须要在 data 里声明。</p><p>但是，Vue 不能检测到对象属性的添加或删除。因为 Vue 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue 转换它，才能让它是响应的。需要额外的 $set。</p></blockquote><p>3、vue2 中响应式（双向绑定）的原理？vue3 的原理？<br>Proxy 与 Object.defineProperty 的优劣对比?<br>为什么在 Vue3.0 采用了 Proxy,抛弃了 Object.defineProperty？</p><blockquote><p>Proxy的优势如下:<br>Proxy 可以直接监听对象而非属性<br>Proxy 可以直接监听数组的变化<br>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的<br>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改<br>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利</p><p>Object.defineProperty 的优势如下:</p><p>兼容性好,支持 IE9</p></blockquote><p>4、vuex 的工作流程是怎么样？</p><blockquote><p>Vuex有5个重要的属性，分别是 State、Getter、Mutation、Action、Module，由 view 层发起一个 Action 给 Mutation，在 Mutation 中修改状态，返回新的状态，通过 Getter暴露给 view层的组件或者页面，页面监测到状态改变于是更新页面。</p></blockquote><p>5、 Vue3 有哪些新的新特性？</p><ul><li>响应式系统</li><li>自定义渲染器</li><li>全部模块使用 TS 重构</li><li>Composition API 组合语法</li><li>新一代工程化工具 Vite</li></ul><p>6、父组件可以监听到子组件的生命周期吗？</p><p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理。</p><p>方法一：手动通过 $emit 触发父组件的事件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Parent.vue</span><br>&lt;Child @mounted=<span class="hljs-string">&quot;doSomething&quot;</span>/&gt;<br>    <br><span class="hljs-comment">// Child.vue</span><br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;mounted&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法二：父组件引用子组件时通过 @hook 来监听</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//  Parent.vue</span><br>&lt;Child @hook:mounted=<span class="hljs-string">&quot;doSomething&quot;</span> &gt;&lt;/Child&gt;<br>    <br><span class="hljs-comment">//  Child.vue</span><br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;子组件触发 mounted 钩子函数 ...&#x27;</span>);<br>&#125;,       <br></code></pre></div></td></tr></table></figure><p>@hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</p><p>7、比较 Vue 和 React 两个框架，你觉得有哪些区别？</p><ul><li><p>监听数据变化的实现原理不同:</p><p>  Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化.<br>  react 中，数据变化后，通过新老数据的计算 Diff 来得知哪些数据发生变化。</p></li><li><p>数据流的不同:</p></li><li><p>模板渲染方式的不同:</p></li></ul><p>8、什么是异步组件？</p><p>在声明或注册组件时，Vue 接受提供 Promise 的工厂函数。然后可以在调用该组件时对其进行“解析”。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">components</span>: &#123;<br>        ‘tweet-box’: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(‘./components/<span class="hljs-keyword">async</span>/TweetBox’)<br>    &#125;<br>&#125;); <br></code></pre></div></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>1、HTTP有哪些请求方法？PUT 和 PATCH 有什么区别？</p><ul><li>GET, POST 和 HEAD方法；OPTIONS, PUT, PATCH, DELETE, TRACE 和 CONNECT</li><li>PUT和PATCH都是更新资源，而PATCH用来对资源进行局部更新。</li></ul><p>2、http 状态码 403 是什么错误？</p><ul><li>403 forbidden，表示对请求资源的访问被服务器拒绝</li></ul><p>3、知道哪些 http 的缓存策略 ？控制缓存的请求头有哪些？</p><ul><li>HTTP缓存机制分为强制缓存和协商缓存两类。</li><li>强制缓存的意思就是不要问了(不发起请求)，直接用缓存吧。</li><li>强制缓存常见技术有Expires和Cache-Control。</li><li>Expires的值是一个时间，表示这个时间前缓存都有效，都不需要发起请求。</li><li>Cache-Control有很多属性值，常用属性max-age设置了缓存有效的时间长度，单位为秒，这个时间没到，都不用发起请求。</li><li>immutable也是Cache-Control的一个属性，表示这个资源这辈子都不用再请求了，但是他兼容性不好，Cache-Control其他属性可以参考MDN的文档。</li><li>Cache-Control的max-age优先级比Expires高。</li><li>协商缓存是为了知道有没有更新，必须跟服务端沟通过才知道的。常见技术有ETag和Last-Modified。</li><li>ETag其实就是给资源算一个hash值或者版本号，对应的常用request header为If-None-Match。</li><li>Last-Modified其实就是加上资源修改的时间，对应的常用request header为If-Modified-Since，精度为秒。</li><li>ETag每次修改都会改变，而Last-Modified的精度只到秒，所以ETag更准确，优先级更高，但是需要计算，所以服务端开销更大。</li><li>强制缓存和协商缓存都存在的情况下，先判断强制缓存是否生效，如果生效，不用发起请求，直接用缓存。如果强制缓存不生效再发起请求判断协商缓存。</li></ul><blockquote><p>Cache-Control，ETag，Last-Modified</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1、有没有读过哪些源码？<br>2、最近开发的项目具体业务是怎么样的？介绍一下？</p><h2 id="Devops-相关"><a href="#Devops-相关" class="headerlink" title="Devops 相关"></a>Devops 相关</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ol><li>谈谈一下对 nginx 的理解，项目中用到 nginx 的哪些功能？</li></ol><ul><li>Nginx ，是一个 Web 服务器和反向代理服务器用于 HTTP、HTTPS、SMTP、POP3 和 IMAP 协议。</li><li>主要功能如下：<br>  正向、反向代理 2、负载均衡、分流 3、虚拟主机（绑定host）</li></ul><p>2、正向代理和反向代理区别是什么？</p><ul><li>正向代理是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定原始服务器，然后代理向原始服务器转交请求并将获得的内容返回给客户端。代理服务器和客户端处于同一个局域网内。</li><li>比如说fanqiang。我知道我要访问谷歌，于是我就告诉代理服务器让它帮我转发。</li><li>反向代理实际运行方式是代理服务器接受网络上的连接请求。它将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给网络上请求连接的客户端 。代理服务器和原始服务器处于同一个局域网内。</li><li>比如说我要访问taobao，对我来说不知道图片、json、css 是不是同一个服务器返回回来的，但是我不关心，是反向代理 处理的，我不知道原始服务器。</li></ul><p>3、nginx 如何来实现负载均衡？</p><p>负载均衡的5种策略:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><br> 1.轮询（默认）<br> 每个请求按时间顺序逐一分配到不同的后端服务器<br><br> upstream backserver &#123;<br>    server 192.168.0.14;<br>    server 192.168.0.15;<br>&#125;<br><br>2.weight<br>指定轮询几率，weight和访问概率成正比<br><br>upstream backserver &#123;<br>    server 192.168.0.14 weight=3;<br>    server 192.168.0.15 weight=7;<br>&#125;<br><br>3.ip_hash<br>已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的.ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br><br>upstream backserver &#123;<br>    ip_hash;<br>    server 192.168.0.14:88;<br>    server 192.168.0.15:80;<br>&#125;<br><br>4.fair<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br><br>upstream backserver &#123;<br>    server server1;<br>    server server2;<br>    fair;<br>&#125;<br><br>5.url_hash<br>按访问url的<span class="hljs-built_in">hash</span>结果来分配请求，使每个url定向到同一个（对应的）后端服务器，后端服务器为缓存时比较有效。<br><br>upstream backserver &#123;<br>    server squid1:3128;<br>    server squid2:3128;<br>    <span class="hljs-built_in">hash</span> <span class="hljs-variable">$request_uri</span>;<br>    hash_method crc32;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>1、什么是 Docker？</p><ul><li>Docker是一个容器化平台，它以容器的形式将您的应用程序及其所有依赖项打包在一起，以确保您的应用程序在任何环境中无缝运行。</li></ul><p>2、Dockerfile中最常见的指令是什么？</p><ul><li>FROM：指定基础镜像；LABEL：功能是为镜像指定标签；RUN：运行指定的命令；CMD：容器启动时要运行的命令。</li></ul><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><p>1、k8s是什么？请说出你的了解？</p><ul><li>Kubernetes 是一个针对容器应用，进行自动部署，弹性伸缩和管理的开源系统。主要功能是生产环境中的容器编排。</li></ul><p>2、k8s 集群里面最小的单位是什么？</p><ul><li>pod 是最小单位。每个pod里边可以运行一个或多个container（容器）</li></ul><p>3、Service这种资源对象的作用是什么？</p><ul><li>用来给相同的多个pod对象提供一个固定的统一访问接口，常用于服务发现和服务访问。</li></ul><h3 id="openstack"><a href="#openstack" class="headerlink" title="openstack"></a>openstack</h3><p>1、openstack 里 KeyStone 组件是用于提供什么服务的？Nova 组件是做什么用？</p><ul><li>认证服务（KeyStone）<br>Nova – 用于在计算级别管理虚拟机，并在计算或管理程序级别执行其他计算任务。</li></ul><h3 id="linux-基本命令"><a href="#linux-基本命令" class="headerlink" title="linux 基本命令"></a>linux 基本命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo<br>ls<br><span class="hljs-built_in">cd</span><br>mkdir<br>rm<br>apt-get<br>grep<br>cat<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;1、浏览器地址栏输入 URL 到页面打开的整个解析过程？&lt;/p&gt;
&lt;h2 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;head</summary>
      
    
    
    
    <category term="面试" scheme="http://mowanqing.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://mowanqing.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 学习笔记</title>
    <link href="http://mowanqing.com/posts/e372be48/"/>
    <id>http://mowanqing.com/posts/e372be48/</id>
    <published>2022-01-22T02:46:00.000Z</published>
    <updated>2022-03-01T02:56:12.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-和-React-数据驱动原理对比"><a href="#Vue-和-React-数据驱动原理对比" class="headerlink" title="Vue 和 React 数据驱动原理对比"></a>Vue 和 React 数据驱动原理对比</h2><p>Vue1 解决方案是使用响应式，初始化的时候，watcher 监听数据的每个属性，数据发生变化的时候，就能够知道数据的哪个 key 变了，去修改对应的 DOM。</p><p>React 是虚拟 DOM 方案，用 JS 对象描述 DOM 树，这个对象就像数据和实际 DOM 的一个缓存层，通过管理这个对象的变化，来减少对实际 DOM 的操作。</p><p>描述实际 DOM 的虚拟 DOM 对象如下：</p><p>DOM:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>虚拟 DOM：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br>&#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>  <span class="hljs-attr">attrs</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;app&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;p&quot;</span>,<br>      <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;item&quot;</span> &#125;,<br>      <span class="hljs-attr">children</span>: [<span class="hljs-string">&quot;Item1&quot;</span>]<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>      <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;item&quot;</span> &#125;,<br>      <span class="hljs-attr">children</span>: [<span class="hljs-string">&quot;Item2&quot;</span>]<br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>数据变化的时候生成一个新的虚拟 DOM 数据，对比之前的虚拟 DOM 进行 diff 计算，算出要修改的 DOM，再对页面进行操作。</p><p>通知页面更新的方式不同：</p><ul><li>vue 中，数据变化，框架主动告诉你修改了哪些数据；</li><li>react 中，变化变化后，通过新老数据的计算 Diff 来得知哪些数据发生变化</li></ul><p>性能问题：</p><ul><li>vue 的响应式，在项目大了之后，每个数据都有一个 watcher 会影响性能</li><li>如果 react 虚拟 dom 过于庞大，使得 diff 计算时间大于 16.6 ms(屏幕刷新率 60HZ, 1/60)，可能造成性能卡顿。</li></ul><p>为了解决性能问题， Vue 和 react 走了不同的道路。</p><ul><li>react 借鉴操作系统时间分片概念，引入 Fiber 架构。把整个虚拟 DOM 树 微观化，变成链表，然后利用浏览器的空闲时间计算 diff。</li><li>vue1 的问题在于响应式数据过多，会带来内存占用过多的问题。vue2 引入虚拟 DOM 来解决响应式数据过多问题。</li></ul><p>响应式数据是主动推送变化，虚拟 DOM 是被动计算数据的 diff。vue2 将两者结合在一起，在组件级别来划分。</p><p>组件间的变化，通过响应式来通知更新。组件内部的数据变化，通过虚拟 DOM 去更新页面。最终，把响应式监听器控制在组件级别，而虚拟 DOM 的量级控制在组件的大小。</p><p>在模板书写上，vue 和 react 分别走了 template 和 jsx 两个路线。</p><ul><li>react 世界只有 jsx，最终 jsx 都会在 Compiler 那层，即工程化那里编译成 js 来执行。</li><li>vue 默认 template。vue3 优秀的其中一点是在虚拟 DOM 的静态标记上做到了极致，让静态的部分越过虚拟 DOM 的计算，真正做到按需更新，很好的提高了性能。</li></ul><h2 id="Vue3-的新特性"><a href="#Vue3-的新特性" class="headerlink" title="Vue3 的新特性"></a>Vue3 的新特性</h2><h3 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h3><p>Vue 2 的响应式机制是基于 Object.defineProperty() 这个 API 实现的.Vue3 是基于 proxy。两者区别是 defineProperty 是拦截具体某个属性， Proxy 是全部拦截，是代理。</p><p>defineProperty 示例如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&quot;title&quot;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>当读取 obj.title 和修改 obj.title 的时候被 defineProperty 拦截，但 defineProperty 对不存在的属性无法拦截，所以 Vue 2 中所有数据必须要在 data 里声明。</p><p>但是，Vue 不能检测到对象属性的添加或删除。因为 Vue 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue 转换它，才能让它是响应的。需要额外的 $set。</p><p>Proxy API 是真正的代理，示例如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>Proxy 拦截 obj 这个数据，不关心 obj 里面属性，统一拦截。</p><h3 id="自定义渲染器"><a href="#自定义渲染器" class="headerlink" title="自定义渲染器"></a>自定义渲染器</h3><p>vue2 内部所有模块是揉在一起，导致不好扩展。vue3 采用 monorepo 方式进行拆包，响应式、编译和运行时全部独立。独立出来的响应式，甚至可以在 react、node 中使用。</p><p><img src="/img/2022-01-24-1.png" alt="vue 架构"></p><p>渲染逻辑拆成 <strong>平台无关渲染逻辑</strong> 和 <strong>浏览器渲染 API</strong>。</p><h3 id="全部模块使用-TS-重构"><a href="#全部模块使用-TS-重构" class="headerlink" title="全部模块使用 TS 重构"></a>全部模块使用 TS 重构</h3><p>Vue2 使用 Flow.js 做类型检测；Flow.js 已被抛弃，vue3 选择 TS。</p><h3 id="Composition-API-组合语法"><a href="#Composition-API-组合语法" class="headerlink" title="Composition API 组合语法"></a>Composition API 组合语法</h3><p>vue2 中示例：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> App = &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.count++;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">double</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count * <span class="hljs-number">2</span>;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>vue2 中 Options API 存在以下问题：</p><ul><li>所有数据都挂载在 this 上，Options API 写法对 TS 类型推导不友好。</li><li>新增的功能基本都要修改 data、method 等，代码行数多了以后，会经常需要上下反复横跳。</li><li>代码不好复用，vue2 的组件很难抽离通用逻辑，只能使用 mixin，还会导致命名冲突问题。</li></ul><p>vue3 中采用新增的 setup 写法：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; reactive, computed &#125; = Vue;<br><span class="hljs-keyword">let</span> App = &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> state = reactive(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>      state.count++;<br>    &#125;<br>    <span class="hljs-keyword">const</span> double = computed(<span class="hljs-function">() =&gt;</span> state.count * <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> &#123; state, add, double &#125;;<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>Composition API 好处如下：</p><ul><li>所有 API 都是 import 引入。对 Tree-shaking 很友好，没用到功能，打包的时候会被清理掉 ，减小包的大小</li><li>一个功能模块的 methods、data 放一起书写，避免上下反复横跳。</li><li>代码复用方便，一个功能的所有 methods、data 封装在一个独立的函数里。</li><li>Composotion API 新增的 return 等语句，在实际项目中使用。</li></ul><p><img src="/img/2022-01-24-2.png" alt="Composition API"></p><h3 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h3><p>Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件。</p><ul><li>Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li><li>Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。</li><li>Suspense: 异步组件，更方便开发有异步请求的组件。</li></ul><h3 id="新一代工程化工具-Vite"><a href="#新一代工程化工具-Vite" class="headerlink" title="新一代工程化工具 Vite"></a>新一代工程化工具 Vite</h3><p>webpack 工程化的原理是 根据 import 依赖逻辑形成一个依赖图，然后调用对应的处理工具，把整个项目打包后，放在内存中再启动调试。因为要预打包，复杂项目开发时，启动开发环境和热更新时间都比较长，Vite 就是为了解决这个问题而出现的。</p><p>现代浏览器已经默认支持 ES6 的 import 语法，Vite 就是基于这个原理实现的。</p><p>在开发环境下，不需要全部预打包，只要把首页依赖的文件，依次通过网络请求去获取，开发体验得到巨大提升，做到复杂项目时，也能做到秒级调试和热更新。</p><p>webpack 工作原理如下，需要把所有路由依赖打包后，才能开始调试。</p><p><img src="/img/2022-01-24-3.png" alt="webpack 工作原理"></p><p>Vite 工作原理，根据首页的依赖模块，再去获取路由 1 的模块，按需加载。</p><p><img src="/img/2022-01-24-4.png" alt="Vite 工作原理"></p><h2 id="Vue3-响应式机制"><a href="#Vue3-响应式机制" class="headerlink" title="Vue3 响应式机制"></a>Vue3 响应式机制</h2><p>响应式原理：Vue 中用过三种响应式解决方案，分别是 defineProperty、Proxy 和 value setter。</p><hr><p>todo: 07</p><h2 id="Vue3-实践常见问题汇总"><a href="#Vue3-实践常见问题汇总" class="headerlink" title="Vue3 实践常见问题汇总"></a>Vue3 实践常见问题汇总</h2><ol><li><p>vetur 报错， xx has no export.</p><p>使用 Vue3 <code>script setup</code> 语法糖时,VsCode 插件 Vetur 会报该错误，原因是 Vetur(v0.35.0) 暂不支持 ts。</p><p>解决办法： 卸载 Vetur， 用 Volar(尤大推荐) 以取代 Vetur。</p></li></ol><hr><p>上述笔记源于学习极客时间-大圣的 <a href="http://gk.link/a/115Qp">玩转 Vue3 全家桶</a> 课程笔记整理。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue-和-React-数据驱动原理对比&quot;&gt;&lt;a href=&quot;#Vue-和-React-数据驱动原理对比&quot; class=&quot;headerlink&quot; title=&quot;Vue 和 React 数据驱动原理对比&quot;&gt;&lt;/a&gt;Vue 和 React 数据驱动原理对比&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://mowanqing.com/categories/Vue/"/>
    
    
    <category term="Vue3" scheme="http://mowanqing.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>map 到底改不改变原数组</title>
    <link href="http://mowanqing.com/posts/d177e434/"/>
    <id>http://mowanqing.com/posts/d177e434/</id>
    <published>2022-01-14T05:53:44.000Z</published>
    <updated>2022-03-01T02:56:12.119Z</updated>
    
    <content type="html"><![CDATA[<p>一般认为 map 不会对原数组进行修改，但事实并不是如此。</p><h2 id="数组内为基础类型数据时-原数组不变"><a href="#数组内为基础类型数据时-原数组不变" class="headerlink" title="数组内为基础类型数据时,原数组不变"></a>数组内为基础类型数据时,原数组不变</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [1,2,3,4,5]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[2, 4, 6, 8, 10]</span><br></code></pre></div></td></tr></table></figure><h2 id="数据内是引用类型数据时，注意写法"><a href="#数据内是引用类型数据时，注意写法" class="headerlink" title="数据内是引用类型数据时，注意写法"></a>数据内是引用类型数据时，注意写法</h2><ol><li><p>item 上直接修改，改变原数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;James&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;<br>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  item.like = <span class="hljs-string">&quot;eat&quot;</span>;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br></code></pre></div></td></tr></table></figure></li><li><p>开辟新的引用地址, 不改变原数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;James&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;<br>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> obj = &#123; ...item, <span class="hljs-attr">like</span>: <span class="hljs-string">&quot;eat&quot;</span> &#125;;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [&#123; name: &#x27;Anna&#x27;, age: 16&#125;,&#123; name: &#x27;James&#x27;, age: 18&#125;]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般认为 map 不会对原数组进行修改，但事实并不是如此。&lt;/p&gt;
&lt;h2 id=&quot;数组内为基础类型数据时-原数组不变&quot;&gt;&lt;a href=&quot;#数组内为基础类型数据时-原数组不变&quot; class=&quot;headerlink&quot; title=&quot;数组内为基础类型数据时,原数组不变&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="JS" scheme="http://mowanqing.com/categories/JS/"/>
    
    
    <category term="map" scheme="http://mowanqing.com/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>如何在 class 组件中使用 hooks</title>
    <link href="http://mowanqing.com/posts/ee7a9294/"/>
    <id>http://mowanqing.com/posts/ee7a9294/</id>
    <published>2022-01-14T03:03:28.000Z</published>
    <updated>2022-03-01T02:56:12.119Z</updated>
    
    <content type="html"><![CDATA[<p>解决办法</p><p>以一个简单的 <code>useScreenWidthhook</code> 函数为例，它的目的是获取全屏的宽度，并且去监听浏览器窗口的变化，更新宽度：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useScreenWidth</span>(<span class="hljs-params"></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> [width, setWidth] = useState(<span class="hljs-built_in">window</span>.innerWidth);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-function">(<span class="hljs-params">event: any</span>) =&gt;</span> &#123;<br>      setWidth(event.target.innerWidth);<br>    &#125;;<br>    <span class="hljs-comment">// 监听浏览器窗口变化</span><br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>, handler);<br>    <span class="hljs-comment">// 组件unmount时要解除监听</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&quot;resize&quot;</span>, handler);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> width;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="方法-1：将-Hook-包装成-HOC"><a href="#方法-1：将-Hook-包装成-HOC" class="headerlink" title="方法 1：将 Hook 包装成 HOC"></a>方法 1：将 Hook 包装成 HOC</h2><p>HOC 是 React 中复用组件的高级用法，它的本质是一个函数，它的输入参数是一个组件，返回相同的组件以及一些额外的 props。在我们的例子里，可以让 hook 函数作为 props 传递到目标组件中:</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../hooks/useScreenWidth&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> withHooksHOC = <span class="hljs-function">(<span class="hljs-params">Component: any</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">props: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> screenWidth = useScreenWidth();<br><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;screenWidth&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>;<br>  &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>将我们的目标组件用上述的 withHooksHOC 包装起来</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; withHooksHOC &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./withHooksHOC&quot;</span>;<br><br>interface IHooksHOCProps &#123;<br>  <span class="hljs-attr">width</span>: number;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HooksHOC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">IHooksHOCProps</span>&gt; </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>width: &#123;this.props.width&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withHooksHOC(HooksHOC);<br></code></pre></div></td></tr></table></figure><h2 id="方法-2：将-Hook-包装成函数组件"><a href="#方法-2：将-Hook-包装成函数组件" class="headerlink" title="方法 2：将 Hook 包装成函数组件"></a>方法 2：将 Hook 包装成函数组件</h2><p>将 hook 变成函数组件，它接收一个参数为 width 的 children 函数，然后将 width 作为 render prop 传递：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; FunctionComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../hooks/useScreenWidth&quot;</span>;<br><br>type ScreenWidthChildren = <span class="hljs-function">(<span class="hljs-params">screenWidth: number</span>) =&gt;</span> React.ReactNode;<br><br>interface IScreenWidthProps &#123;<br>  <span class="hljs-attr">children</span>: ScreenWidthChildren;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ScreenWidth: FunctionComponent&lt;IScreenWidthProps&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; children &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> screenWidth: number = useScreenWidth();<br><br>  <span class="hljs-keyword">return</span> children(screenWidth);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>使用：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./ScreenWidth&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HooksRenderProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScreenWidth</span>&gt;</span>&#123;(width) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span> &quot;<span class="hljs-attr">48px</span>&quot; &#125;&#125;&gt;</span>width: &#123;width&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ScreenWidth</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;解决办法&lt;/p&gt;
&lt;p&gt;以一个简单的 &lt;code&gt;useScreenWidthhook&lt;/code&gt; 函数为例，它的目的是获取全屏的宽度，并且去监听浏览器窗口的变化，更新宽度：&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="React" scheme="http://mowanqing.com/categories/React/"/>
    
    
    <category term="HooK" scheme="http://mowanqing.com/tags/HooK/"/>
    
  </entry>
  
  <entry>
    <title>useState 引用类型数据更新不触发重新渲染问题</title>
    <link href="http://mowanqing.com/posts/b195fb80/"/>
    <id>http://mowanqing.com/posts/b195fb80/</id>
    <published>2022-01-14T02:24:50.000Z</published>
    <updated>2022-03-01T02:56:12.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="useState-函数式更新"><a href="#useState-函数式更新" class="headerlink" title="useState 函数式更新"></a>useState 函数式更新</h2><p>与 class 组件中的 setState 方法不同，useState 不会自动合并更新对象。你可以用函数式的 setState 结合展开运算符来达到合并更新对象的效果。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, setState] = useState(&#123;&#125;);<br>setState(<span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 也可以使用 Object.assign</span><br>  <span class="hljs-keyword">return</span> &#123; ...prevState, ...updatedValues &#125;;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="引用类型-state-更新"><a href="#引用类型-state-更新" class="headerlink" title="引用类型 state 更新"></a>引用类型 state 更新</h2><p>经常 state 数据不是简单数据类型(值类型)，而是数组、对象之类(引用类型).而 React 组件的更新机制对 state 只进行浅对比，也就是更新某个复杂类型数据时只要它的引用地址没变，那就不会重新渲染组件。</p><p>尤其当被更新的引用类型数据需要依赖之前的数据时，容易踩坑,不触发更新。更新复杂 state 的时候必须传给它一个全新的对象，而不是复制了它引用地址再修改的对象。</p><p>两种解决办法：</p><ol><li><p>结合展开运算符返回一个新对象</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextValue</span>(<span class="hljs-params">preValue</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ipValue = <span class="hljs-built_in">Number</span>.parseInt(newVal, <span class="hljs-number">10</span>);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.isNaN(ipValue)) &#123;<br>    ipValue = <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &lt; <span class="hljs-number">0</span>) &#123;<br>    ipValue = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &gt; <span class="hljs-number">255</span>) &#123;<br>    ipValue = <span class="hljs-number">255</span>;<br>  &#125;<br>  preValue[index] = ipValue; <span class="hljs-comment">//这里数据引用地址的值同样被修改</span><br>  <span class="hljs-keyword">return</span> [...preValue]; <span class="hljs-comment">// 数据最外层的引用地址不同即可触发组件更新</span><br>&#125;<br><br>setValue(<span class="hljs-function">(<span class="hljs-params">preValue</span>) =&gt;</span> nextValue(preValue));<br></code></pre></div></td></tr></table></figure></li><li><p>深拷贝对象，用全新的副本更新数据。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextValue</span>(<span class="hljs-params">preValue</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> newValue = _.cloneDeep(preValue);<br>  <span class="hljs-keyword">let</span> ipValue = <span class="hljs-built_in">Number</span>.parseInt(newVal, <span class="hljs-number">10</span>);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.isNaN(ipValue)) &#123;<br>    ipValue = <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &lt; <span class="hljs-number">0</span>) &#123;<br>    ipValue = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &gt; <span class="hljs-number">255</span>) &#123;<br>    ipValue = <span class="hljs-number">255</span>;<br>  &#125;<br>  newValue[index] = ipValue; <span class="hljs-comment">//这里数据引用地址的值同样被修改</span><br>  <span class="hljs-keyword">return</span> newValue; <span class="hljs-comment">// 数据最外层的引用地址不同即可触发组件更新</span><br>&#125;<br><br>setValue(<span class="hljs-function">(<span class="hljs-params">preValue</span>) =&gt;</span> nextValue(preValue));<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;useState-函数式更新&quot;&gt;&lt;a href=&quot;#useState-函数式更新&quot; class=&quot;headerlink&quot; title=&quot;useState 函数式更新&quot;&gt;&lt;/a&gt;useState 函数式更新&lt;/h2&gt;&lt;p&gt;与 class 组件中的 setState </summary>
      
    
    
    
    <category term="React" scheme="http://mowanqing.com/categories/React/"/>
    
    
    <category term="HooK" scheme="http://mowanqing.com/tags/HooK/"/>
    
  </entry>
  
  <entry>
    <title>使用 useRef 跨生命周期保存变量</title>
    <link href="http://mowanqing.com/posts/bb88c12/"/>
    <id>http://mowanqing.com/posts/bb88c12/</id>
    <published>2022-01-13T07:23:54.000Z</published>
    <updated>2022-03-01T02:56:12.117Z</updated>
    
    <content type="html"><![CDATA[<p>ref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.</p><p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p><h2 id="场景-1：只在更新时运行-useEffect"><a href="#场景-1：只在更新时运行-useEffect" class="headerlink" title="场景 1：只在更新时运行 useEffect"></a>场景 1：只在更新时运行 useEffect</h2><p>使用一个可变的 ref 手动存储一个布尔值来表示是首次渲染还是后续渲染.</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> prevCountRef = useRef(<span class="hljs-literal">false</span>);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (prevCountRef.current) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;只在更新时候执行&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;首次渲染执行&quot;</span>);<br>      prevCountRef.current = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>抽成自定义 hook：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> update = useUpdate();<br>  <span class="hljs-built_in">console</span>.log(update, <span class="hljs-string">&quot;是否更新&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useUpdate</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ref = useRef(<span class="hljs-literal">false</span>);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.current = <span class="hljs-literal">true</span>;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="场景-2：获取上一轮的-props-或-state"><a href="#场景-2：获取上一轮的-props-或-state" class="headerlink" title="场景 2：获取上一轮的 props 或 state"></a>场景 2：获取上一轮的 props 或 state</h2><p>为什么 ref.current 拿到是上次的值？原因：</p><ol><li>useEffect 很重要的一点是：它是在每次渲染之后才会触发的，是延迟执行的。</li><li>return 语句是同步的，所以 return 的时候，ref.current 还是旧值。</li><li>以下代码的执行顺序是 1 3 2</li></ol><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> prevCountRef = useRef();<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1&quot;</span>, count);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;2.&quot;</span>, count);<br>    prevCountRef.current = count;<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> prevCount = prevCountRef.current;<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`3.之前的状态: <span class="hljs-subst">$&#123;prevCount&#125;</span>;现在状态: <span class="hljs-subst">$&#123;count&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>抽取成自定义 Hook:</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">usePrevious</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ref = useRef();<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.current = value;<br>  &#125;, [value]);<br><br>  <span class="hljs-keyword">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="场景-3：解决-hooks-时，由于异步闭包无法获取最新-state-的问题"><a href="#场景-3：解决-hooks-时，由于异步闭包无法获取最新-state-的问题" class="headerlink" title="场景 3：解决 hooks 时，由于异步闭包无法获取最新 state 的问题"></a>场景 3：解决 hooks 时，由于异步闭包无法获取最新 state 的问题</h2><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> RefComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 使用 useState 存放和改变展示的 number</span><br>  <span class="hljs-keyword">const</span> [number, setNumber] = useState(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 使用 useRef 生成一个独立的 ref 对象</span><br>  <span class="hljs-comment">// 在它的 current 属性单独存放一个展示的 number, 初始值为 0</span><br>  <span class="hljs-keyword">const</span> numRef = useRef(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incrementAndDelayLogging</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 点击按钮 number + 1</span><br>    setNumber(number + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 同时 ref 对象的 current 属性值也 + 1</span><br>    numRef.current++;<br>    <span class="hljs-comment">// 定时器函数中产生了闭包, 这里 number 的是组件更新前的 number 对象, 所以值一直会滞后 1</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> alert(<span class="hljs-string">`state: <span class="hljs-subst">$&#123;number&#125;</span> | ref: <span class="hljs-subst">$&#123;numRef.current&#125;</span>`</span>), <span class="hljs-number">1000</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 直接渲染的组件是正常情况, 可以获取到最新的 state,</span><br>  <span class="hljs-comment">// 所以 ref.current 和 state 存储的值显示一致</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>solving closure by useRef<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;incrementAndDelayLogging&#125;</span>&gt;</span>alert in setTimeout<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>state: &#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>ref: &#123;numRef.current&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.&lt;/p&gt;
&lt;p&gt;当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引</summary>
      
    
    
    
    <category term="React" scheme="http://mowanqing.com/categories/React/"/>
    
    
    <category term="React" scheme="http://mowanqing.com/tags/React/"/>
    
    <category term="HooK" scheme="http://mowanqing.com/tags/HooK/"/>
    
  </entry>
  
  <entry>
    <title>FE-Interview</title>
    <link href="http://mowanqing.com/posts/12d2438b/"/>
    <id>http://mowanqing.com/posts/12d2438b/</id>
    <published>2022-01-01T15:28:37.000Z</published>
    <updated>2022-03-02T01:57:04.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-1-天-2022-02-28"><a href="#第-1-天-2022-02-28" class="headerlink" title="第 1 天 (2022.02.28)"></a>第 1 天 (2022.02.28)</h2><h3 id="1-什么时候使用状态管理器？"><a href="#1-什么时候使用状态管理器？" class="headerlink" title="1. 什么时候使用状态管理器？"></a>1. 什么时候使用状态管理器？</h3><ol><li>组件状态要在多个组件共享时</li><li>某个组件状态需要在任何地方可以拿到</li><li>一个组件需要改变全局状态时</li><li>一个组件需要改变另一个组件状态时</li><li>组件状态提升提升不能满足需求时，层级过多时。</li></ol><h3 id="2-render-函数中-return-如果没有使用-会有什么问题？"><a href="#2-render-函数中-return-如果没有使用-会有什么问题？" class="headerlink" title="2. render 函数中 return 如果没有使用()会有什么问题？"></a>2. render 函数中 return 如果没有使用()会有什么问题？</h3><p>避免遇到自动插入分号陷阱。</p><p>我们在使用 JSX 语法书写 react 代码时，babel 会将 JSX 语法编译成 js，同时会在每行自动添加分号（；），如果 return 后换行了，那么就会变成 return； 一般情况下会报错：</p><p>Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.<br>上面这段英文翻译成中文：</p><p>渲染没有返回任何内容。这通常意味着缺少 return 语句。或者，为了不渲染，返回 null。<br>为了代码可读性我们一般会在 return 后面添加括号这样代码可以折行书写，否则就在 return 后面紧跟着语句，这样也是可以的。</p><p>举两个正确的书写例子：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Nav = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;c_navbar&quot;</span>&gt;</span></span><br><span class="xml">      &#123; some jsx magic here &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>    )<br>  &#125;<br><br><span class="hljs-keyword">const</span> Nav = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;c_navbar&quot;</span>&gt;</span></span><br><span class="xml">    &#123; some jsx magic here &#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>错误的写法：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Nav = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;c_navbar&quot;</span>&gt;</span></span><br><span class="xml">      &#123; some jsx magic here &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-componentWillUpdate-可以直接修改-state-的值吗？"><a href="#3-componentWillUpdate-可以直接修改-state-的值吗？" class="headerlink" title="3. componentWillUpdate 可以直接修改 state 的值吗？"></a>3. componentWillUpdate 可以直接修改 state 的值吗？</h3><p>直接修改不可以，但是加上条件就可以。</p><p>文档原文：“你也可以在 componentDidUpdate() 中直接调用 setState()，但请注意它必须被包裹在一个条件语句里，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。”</p><p>componentWillReceiveProps 同理</p><h3 id="4-说说你对-React-的渲染原理的理解"><a href="#4-说说你对-React-的渲染原理的理解" class="headerlink" title="4. 说说你对 React 的渲染原理的理解"></a>4. 说说你对 React 的渲染原理的理解</h3><ol><li>React 会调用 React.render()构建一颗 DOM 树，生成虚拟 dom。</li><li>通过改变 state 或 props 触发更新。</li><li>对比新旧虚拟 dom，diff 算法，深度优先，将实际需要改变的反应到真实 dom。</li></ol><h2 id="第-2-天-2022-03-01"><a href="#第-2-天-2022-03-01" class="headerlink" title="第 2 天 (2022.03.01)"></a>第 2 天 (2022.03.01)</h2><h3 id="5-什么渲染劫持？"><a href="#5-什么渲染劫持？" class="headerlink" title="5. 什么渲染劫持？"></a>5. 什么渲染劫持？</h3><p>一般和高阶组件（HOC）一起解释。</p><p>高阶组件在 render 的时候可以做其他操作，从而控制原组件的渲染输出，这种改变原组件渲染的方式称为 渲染劫持。</p><p>在高阶组件中，组合渲染和条件渲染都是渲染劫持的一种，通过反向继承，不仅可实现渲染劫持，还可以增强原组件 render 函数。</p><p>除了 HOC，当新写一个组件，继承自一个已有的组件，可以随便修改 render 函数，使用 state、props 等改变原组件的渲染，都叫渲染劫持。</p><h4 id="PS-HOC-反向继承"><a href="#PS-HOC-反向继承" class="headerlink" title="PS: HOC 反向继承"></a>PS: HOC 反向继承</h4><p>TODO：</p><h3 id="6-React-Intl是什么原理？"><a href="#6-React-Intl是什么原理？" class="headerlink" title="6. React Intl是什么原理？"></a>6. React Intl是什么原理？</h3><p>React Intl 用途是国际化库，提供组件、日期等国际化方法。</p><p>做国际化就类似于字体文件，通过切换语言，加载不同语言包到本地.</p><p>最外层包一个Provider。调用库中方法，完成国际化。</p><p>前端国际化核心步骤有两步：</p><ul><li>创建资源文件，以 key-value 方式存储</li><li>加载资源文件，将页面上 key 的内容替换为相关 value</li></ul><h3 id="7-怎么实现React组件的国际化呢？"><a href="#7-怎么实现React组件的国际化呢？" class="headerlink" title="7. 怎么实现React组件的国际化呢？"></a>7. 怎么实现React组件的国际化呢？</h3><p> 使用 i18next 以及 react-i18next 配合 i18next-scanner，通过 grunt 跑 task 自动扫描生成 json 文件。</p><p> 现在大厂比较常用的方案是，使用AST，每次开发完新版本，通过AST去扫描所有的代码，找出代码中的中文，以中文为key，调用智能翻译服务，去帮项目自动生成json文件。这样，再也不需要人为去维护json文件，一切都依赖工具进行自动化。</p><h2 id="第-3-天（2022-3-2）"><a href="#第-3-天（2022-3-2）" class="headerlink" title="第 3 天（2022.3.2）"></a>第 3 天（2022.3.2）</h2><ul><li><a href="https://github.com/haizlin/fe-interview/issues/945">说说Context有哪些属性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/944">怎么使用Context开发组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/943">为什么React并不推荐我们优先考虑使用Context？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/942">除了实例的属性可以获取Context外哪些地方还能直接获取Context呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/941">childContextTypes是什么？它有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/940">contextType是什么？它有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/939">Consumer向上找不到Provider的时候怎么办？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/938">有使用过Consumer吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/937">在React怎么使用Context？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/936">React15和16别支持IE几以上？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/935">说说你对windowing的了解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/934">举例说明React的插槽有哪些运用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/933">你有用过React的插槽(Portals)吗？怎么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/932">React的严格模式有什么用处？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/931">React如何进行代码拆分？拆分的原则是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/930">React组件的构造函数有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/929">React组件的构造函数是必须的吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/928">React中在哪捕获错误？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/927">React怎样引入svg的文件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/926">说说你对Relay的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/925">在React中你有经常使用常量吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/924">为什么说React中的props是只读的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/923">你有使用过formik库吗？说说它的优缺点</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/901">你有用过哪些React的表单库吗？说说它们的优缺点</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/900">如果组件的属性没有传值，那么它的默认值是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/899">可以使用TypeScript写React应用吗？怎么操作？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/898"><code>super()</code>和<code>super(props)</code>有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/897">你有使用过loadable组件吗？它帮我们解决了什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/896">你有使用过suspense组件吗？它帮我们解决了什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/895">怎样动态导入组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/894">如何给非控组件设置默认的值？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/893">怎么在React中引入其它的UI库，例如Bootstrap</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/892">怎样将事件传递给子组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/891">怎样使用Hooks获取服务端数据？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/890">使用Hooks要遵守哪些原则？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/889">render方法的原理你有了解吗？它返回的数据类型是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/888">useEffect和useLayoutEffect有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/887">在React项目中你用过哪些动画的包？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/886">React必须使用JSX吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/885">自定义组件时render是可选的吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/884">需要把keys设置为全局唯一吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/883">怎么定时更新一个组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/882">React根据不同的环境打包不同的域名？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/881">使用webpack打包React项目，怎么减小生成的js大小？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/880">在React中怎么使用async/await？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/879">你阅读了几遍React的源码？都有哪些收获？你是怎么阅读的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/878">什么是React.forwardRef？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/877">写个例子说明什么是JSX的内联条件渲染</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/876">在React中怎么将参数传递给事件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/875">React的事件和普通的HTML事件有什么不同？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/874">在React中怎么阻止事件的默认行为？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/873">你最喜欢React的哪一个特性（说一个就好）？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/872">在React中什么时候使用箭头函数更方便呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/871">你最不喜欢React的哪一个特性（说一个就好）？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/870">说说你对React的reconciliation（一致化算法）的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/869">使用PropTypes和Flow有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/868">怎样有条件地渲染组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/867">在JSX中如何写注释？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/866">constructor和getInitialState有不同？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/865">写例子说明React如何在JSX中实现for循环</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/864">为什么建议Fragment包裹元素？它的简写是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/863">你有用过React.Fragment吗？说说它有什么用途？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/862">在React中你有遇到过安全问题吗？怎么解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/861">React中如何监听state的变化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/860">React什么是有状态组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/859">React v15中怎么处理错误边界？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/858">React Fiber它的目的是解决什么问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/857">React为什么不要直接修改state？如果想修改怎么做？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/856">create-react-app有什么好处？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/855">装饰器(Decorator)在React中有什么应用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/854">使用高阶组件(HOC)实现一个loading组件</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/853">如何用React实现滚动动画？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/852">说出几点你认为的React最佳实践</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/851">你是如何划分React组件的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/850">举例说明如何在React创建一个事件</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/849">如何更新组件的状态？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/848">怎样将多个组件嵌入到一个组件中？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/847">React的render中可以写{if else}这样的判断吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/846">React为什么要搞一个Hooks？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/845">React Hooks帮我们解决了哪些问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/844">使用React的memo和forwardRef包装的组件为什么提示children类型不对？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/843">有在项目中使用过Antd吗？说说它的好处</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/842">在React中如果去除生产环境上的sourcemap？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/841">在React中怎么引用sass或less？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/840">组件卸载前，加在DOM元素的监听事件和定时器要不要手动清除？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/839">为什么标签里的for要写成htmlFor呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/838">状态管理器解决了什么问题？什么时候用状态管理器？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/837">状态管理器它精髓是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/836">函数式组件有没有生命周期？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/835">在React中怎么引用第三方插件？比如说jQuery等</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/834">React的触摸事件有哪几种？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/833">路由切换时同一组件无法重新渲染的有什么方法可以解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/832">React16新特性有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/831">你有用过哪些React的UI库？它们的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/830"><code>&lt;div onClick=&#123;handlerClick&#125;&gt;单击&lt;/div&gt;</code>和<code>&lt;div onClick=&#123;handlerClick(1)&#125;&gt;单击&lt;/div&gt;</code>有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/829">在React中如何引入图片？哪种方式更好？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/828">在React中怎么使用字体图标？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/827">React的应用如何打包发布？它的步骤是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/826">ES6的语法’…’在React中有哪些应用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/825">如何封装一个React的全局公共组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/824">在React中组件的props改变时更新组件的有哪些方法？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/823">immutable的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/822">你对immutable有了解吗？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/821">如何提高组件的渲染效率呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/820">在React中如何避免不必要的render？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/819">render在什么时候会被触发？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/818">写出React动态改变class切换组件样式</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/817">React中怎么操作虚拟DOM的Class属性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/816">为什么属性使用className而不是class呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/815">请说下react组件更新的机制是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/814">怎么在JSX里属性可以被覆盖吗？覆盖的原则是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/813">怎么在JSX里使用自定义属性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/812">怎么防止HTML被转义？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/811">经常用React，你知道React的核心思想是什么吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/810">在React中我们怎么做静态类型检测？都有哪些方法可以做到？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/809">在React中组件的state和setState有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/808">React怎样跳过重新渲染？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/807">React怎么判断什么时候重新渲染组件呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/806">什么是React的实例？函数式组件有没有实例？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/805">在React中如何判断点击元素属于哪一个组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/804">在React中组件和元素有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/803">在React中声明组件时组件名的第一个字母必须是大写吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/802">举例说明什么是高阶组件(HOC)的反向继承？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/801">有用过React Devtools吗？说说它的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/800">举例说明什么是高阶组件(HOC)的属性代理？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/799">React的isMounted有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/798">React组件命名推荐的方式是哪个？为什么不推荐使用displayName？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/797">React的displayName有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/796">说说你对React的组件命名规范的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/795">说说你对React的项目结构的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/794">React16废弃了哪些生命周期？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/793">怎样在React中开启生产模式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/792">React中getInitialState方法的作用是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/791">React中你知道creatClass的原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/790">React中验证props的目的是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/789">React中你有使用过getDefaultProps吗？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/788">React中你有使用过propType吗？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/787">React中怎么检验props？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/786">React.createClass和extends Component的区别有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/785">高阶组件(HOC)有哪些优点和缺点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/784">给组件设置很多属性时不想一个个去设置有什么办法可以解决这问题呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/756">React16跟之前的版本生命周期有哪些变化？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/755">怎样实现React组件的记忆？原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/754">创建React动画有哪些方式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/753">为什么建议不要过渡使用Refs？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/752">在React使用高阶组件(HOC)有遇到过哪些问题？如何解决？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/751">在使用React过程中什么时候用高阶组件(HOC)？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/724">说说React diff的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/723">React怎么提高列表渲染的性能？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/722">使用ES6的class定义的组件不支持mixins了，那用什么可以替代呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/720">为何说虚拟DOM会提高性能？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/719">React的性能优化在哪个生命周期？它优化的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/718">你知道的React性能优化有哪些方法？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/717">举例说明在React中怎么使用样式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/716">React有哪几种方法来处理表单输入？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/715">什么是浅层渲染？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/714">你有做过React的单元测试吗？如果有，用的是哪些工具？怎么做的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/713">在React中什么是合成事件？有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/712">使用React写一个todo应用，说说你的思路</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/711">React16的reconciliation和commit分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/710">React的函数式组件有没有生命周期？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/709">useState和this.state的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/708">请说说什么是useImperativeHandle？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/707">请说说什么是useReducer？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/706">请说说什么是useRef？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/705">请说说什么是useEffect？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/704">举例说明useState</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/703">请说说什么是useState？为什么要使用useState？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/702">请描述下你对React的新特性Hooks的理解？它有哪些应用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/701">说说你对Error Boundaries的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/700">说说你对Fiber架构的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/699">说说你是怎么理解React的业务组件和技术组件的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/698">为什么建议setState的第一个参数是callback而不是一个对象呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/697">展示组件和容器组件有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/696">Mern和Yeoman脚手架有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/695">你有在项目中使用过Yeoman脚手架吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/694">你有在项目中使用过Mern脚手架吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/693">shouldComponentUpdate方法是做什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/692">怎样在React中使用innerHTML？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/691">你有写过React的中间件插件吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/690">React的中间件机制是怎么样的？这种机制有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/689">React中你用过哪些第三方的中间件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/688">不用脚手架，你会手动搭建React项目吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/687">请说说React中Portal是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/686">React中修改prop引发的生命周期有哪几个？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/685">React多个setState调用的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/684">React中调用setState会更新的生命周期有哪几个？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/683">React中setState的第二个参数作用是什么呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/682">React中的setState是同步还是异步的呢？为什么state并不一定会同步更新？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/681">React中的setState批量更新的过程是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/680">React中的setState执行机制是什么呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/679">在React中遍历的方法有哪些？它们有什么区别呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/678">请说说你对React的render方法的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/677">props.children.map和js的map有什么区别？为什么优先选择React的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/676">有用过React的严格模式吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/675">React中的setState和replaceState的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/674">React中的setState缺点是什么呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/673">有用过React的Fragment吗？它的运用场景是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/672">React组件间共享数据方法有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/671">React的状态提升是什么？使用场景有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/670">简单描述下你有做过哪些React项目？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/669">在构造函数中调用super(props)的目的是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/668">你是如何学习React的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/667">从旧版本的React升级到新版本的React有做过吗？有遇到过什么坑？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/666">你用过React版本有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/665">有用过React的服务端渲染吗？怎么做的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/664">React的mixins有什么作用？适用于什么场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/663">React怎么拿到组件对应的DOM元素？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/662">请描述下事件在React中的处理方式是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/661">JSX和HTML有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/660">React的书写规范有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/659">create-react-app创建新运用怎么解决卡的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/658">使用React的方式有哪几种？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/657">说说你对reader的context的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/656">同时引用这三个库React.js、React-dom.js和babel.js它们都有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/655">你知道Virtual DOM的工作原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/654">你阅读过React的源码吗？简要说下它的执行流程</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/653">React中怎样阻止组件渲染？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/652">React非兄弟组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/651">React兄弟组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/650">React非父子组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/649">React父子组件如何通信？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/648">React组件间的通信有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/647">类组件和函数式组件有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/646">React自定义组件你写过吗？说说看都写过哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/645">React组件的state和props两者有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/644">React有几种构建组件的方式？可以写出来吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/643">React中遍历时为什么不用索引作为唯一的key值？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/642">React中的key有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/641">React中除了在构造函数中绑定this,还有别的方式吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/640">在React中页面重新加载时怎样保留数据？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/639">请描述下React的事件机制</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/638">怎样在React中创建一个事件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/637">在React中无状态组件有什么运用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/636">描述下在React中无状态组件和有状态组件的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/635">写一个React的高阶组件(HOC)并说明你对它的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/634">React中可以在render访问refs吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/633">React中refs的作用是什么？有哪些应用场景？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/632">请描述你对纯函数的理解？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/631">受控组件和非受控组件有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/630">React中什么是非控组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/629">React中什么是受控组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/628">React中发起网络请求应该在哪个生命周期中进行？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/627">说说React的生命周期有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/626">说说你对“在React中，一切都是组件”的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/625">写React你是用es6还是es5的语法？有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/624">浏览器为什么无法直接JSX？怎么解决呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/623">在使用React过程中你都踩过哪些坑？你是怎么填坑的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/622">说说你喜欢React的原因是什么？它有什么优缺点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/621">如何解决引用类型在pureComponent下修改值的时候，页面不渲染的问题？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/620">createElement与cloneElement两者有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/619">解释下React中Element 和Component两者的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/618">解释下React中component和pureComponent两者的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/617">React的虚拟DOM和vue的虚拟DOM有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/616">你觉得React上手快不快？它有哪些限制？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/615">说说你对声明式编程的理解？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/614">React与angular、vue有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/613">React是哪个公司开发的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/612">React是什么？它的主要特点是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/611">简要描述下你知道的React工作原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/606">在React中怎样改变组件状态，以及状态改变的过程是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/605">在React中你是怎么进行状态管理的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/604">React声明组件有哪几种方法，各有什么不同？</a></li></ul><h3 id="ReactNative"><a href="#ReactNative" class="headerlink" title="ReactNative"></a>ReactNative</h3><ul><li><a href="">如何在React Native中设置环境变量？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/783">请描述下Code Push的原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/782">React Native怎样查看日记？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/781">React Native怎样测试？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/780">React Native怎样调试？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/779">React Native和React有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/725">有做过React Native项目吗？</a></li></ul><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/922">React-Router怎么获取历史对象？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/921">React-Router怎么获取URL的参数？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/778">在history模式中push和replace有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/777">React-Router怎么设置重定向？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/776">React-Router 4中<code>&lt;Router&gt;</code>组件有几种类型？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/775">React-Router 3和React-Router 4有什么变化？添加了什么好的特性？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/774">React-Router的实现原理是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/773">React-Router 4的switch有什么用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/772">React-Router的路由有几种模式？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/771">React-Router 4怎样在路由变化时重新渲染同一个组件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/770">React-Router的<code>&lt;Link&gt;</code>标签和<code>&lt;a&gt;</code>标签有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/728">React的路由和普通路由有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/727">请你说说React的路由的优缺点？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/726">请你说说React的路由是什么？</a></li></ul><h3 id="Redux-Mobx"><a href="#Redux-Mobx" class="headerlink" title="Redux/Mobx"></a>Redux/Mobx</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/920">你有了解Rxjs是什么吗？它是做什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/919">在Redux中怎么发起网络请求？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/918">Redux怎样重置状态？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/917">Redux怎样设置初始状态？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/916">Context api可以取代Redux吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/915">推荐在reducer中触发Action吗？为什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/914">Redux怎么添加新的中间件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/913">redux-saga和redux-thunk有什么本质的区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/912">在React中你是怎么对异步方案进行选型的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/911">你知道redux-saga的原理吗？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/910">你有使用过redux-saga中间件吗？它是干什么的？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/769">Redux中异步action和同步action最大的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/768">Redux和vuex有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/767">Redux的中间件是什么？你有用过哪些Redux的中间件？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/766">说说Redux的实现流程</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/765">Mobx的设计思想是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/764">Redux由哪些组件构成？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/763">Mobx和Redux有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/762">在React项目中你是如何选择Redux和Mobx的？说说你的理解</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/761">你有在React中使用过Mobx吗？它的运用场景有哪些？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/740">Redux的thunk作用是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/739">Redux的数据存储和本地储存有什么区别？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/738">在Redux中，什么是reducer？它有什么作用？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/737">举例说明怎么在Redux中定义action？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/736">在Redux中，什么是action？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/735">在Redux中，什么是store？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/734">为什么Redux能做到局部渲染呢？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/733">说说Redux的优缺点分别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/732">Redux和Flux的区别是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/731">Redux它的三个原则是什么？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/730">什么是单一数据源？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/729">什么是Redux？说说你对Redux的理解？有哪些运用场景？</a></li></ul><h3 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h3><ul><li><a href="https://github.com/haizlin/fe-interview/issues/742">请说说点击按钮触发到状态更改，数据的流向？</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/742">请描述下Flux的思想</a></li><li><a href="https://github.com/haizlin/fe-interview/issues/741">什么是Flux？说说你对Flux的理解？有哪些运用场景？</a></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/qiu-deqing/FE-interview">https://github.com/qiu-deqing/FE-interview</a></li><li><a href="https://github.com/haizlin/fe-interview">https://github.com/haizlin/fe-interview</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第-1-天-2022-02-28&quot;&gt;&lt;a href=&quot;#第-1-天-2022-02-28&quot; class=&quot;headerlink&quot; title=&quot;第 1 天 (2022.02.28)&quot;&gt;&lt;/a&gt;第 1 天 (2022.02.28)&lt;/h2&gt;&lt;h3 id=&quot;1-什么时</summary>
      
    
    
    
    <category term="面试" scheme="http://mowanqing.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="http://mowanqing.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>日常使用的容器镜像操作命令</title>
    <link href="http://mowanqing.com/posts/25d325e2/"/>
    <id>http://mowanqing.com/posts/25d325e2/</id>
    <published>2021-12-01T02:25:42.000Z</published>
    <updated>2022-03-01T02:56:12.118Z</updated>
    
    <content type="html"><![CDATA[<p>构建镜像</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker build -t user-manage:v1.0 .<br></code></pre></div></td></tr></table></figure><p>运行容器镜像</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker run --rm -d -p 8089:80 --name k8s-installer-test -v ~/gitlab/k8s-installer-ui/dist:/usr/share/nginx/html -v ~/default.conf:/etc/nginx/conf.d/default.conf nginx<br><br><span class="hljs-comment"># --rm container 停止后删除 container</span><br><span class="hljs-comment"># -d 后台运行容器</span><br><span class="hljs-comment"># -p 80:80 前者本地端口，后者是 dockerfile 暴露端口</span><br><span class="hljs-comment"># --name 指定容器名称</span><br><span class="hljs-comment"># -v 挂载替换容器内指定文件</span><br></code></pre></div></td></tr></table></figure><p>将镜像打成 tar 包</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker save user-manage:latest &gt; ~/Downloads/usermanage.tar<br></code></pre></div></td></tr></table></figure><p>上传 tar 包到指定服务器</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">scp ~/Downloads/usermanage.tar root@172.16.60.99:/tmp/<br></code></pre></div></td></tr></table></figure><p>从服务器下载 tar 包到本地</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">scp -r caas-aio:~/tmp/origin-web-console.tar ~/Downloads/<span class="hljs-built_in">test</span>/<br></code></pre></div></td></tr></table></figure><p>从 tar 包加载镜像</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker load &lt; /tmp/usermanage.tar<br><span class="hljs-comment"># 可以查看到</span><br>docker images <br></code></pre></div></td></tr></table></figure><p>给镜像重新打 tag</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker tag user-manage:latest docker.io/user-manage:latest<br></code></pre></div></td></tr></table></figure><p>进入容器内部</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 镜像 id</span><br>docker <span class="hljs-built_in">exec</span> -it 73bee1a2a355 /bin/bash<br><span class="hljs-comment"># 或者 /bin/sh</span><br></code></pre></div></td></tr></table></figure><p>查看镜像元数据，常用来查看 commit-id</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker inspect &lt;image-id&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;构建镜像&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter hljs&quot;&gt;&lt;div class=&quot;hljs code-wrapper&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
