<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React Hooks 之闭包</title>
    <link href="/posts/44dd3b46/"/>
    <url>/posts/44dd3b46/</url>
    
    <content type="html"><![CDATA[<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>React Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Hooks 之 useEffect</title>
    <link href="/posts/0/"/>
    <url>/posts/0/</url>
    
    <content type="html"><![CDATA[<p>Function Component 是更彻底的状态驱动抽象。要彻底理解 Hooks 需要忘掉 Class Component 生命周期,理解 FC 的思维方式。</p><h2 id="每次渲染都有他自己的-props-和-state"><a href="#每次渲染都有他自己的-props-和-state" class="headerlink" title="每次渲染都有他自己的 props 和 state"></a>每次渲染都有他自己的 props 和 state</h2><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span><br><span class="xml">        Click me</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code> &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</code> 该行中的 count 如何理解？</p><p>第一感觉是 count 是会“监听”状态变化自动更新。它不是 data binding、watcher、proxy。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> count = <span class="hljs-number">42</span>; <span class="hljs-comment">// count 只是一个数字</span><br><span class="hljs-comment">// ...</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="hljs-comment">// ...</span><br></code></pre></div></td></tr></table></figure><p>组件第一次渲染，count 初始值是 0。 调用 setCount(1),react 再次渲染组件，这次 count 是 1。以此类推。。。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// During first render</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// Returned by useState()</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// After a click, our function is called again</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-number">1</span>; <span class="hljs-comment">// Returned by useState()</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// After another click, our function is called again</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-number">2</span>; <span class="hljs-comment">// Returned by useState()</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>每次状态更新，react 重新渲染组件。每一次的渲染中的 count 都是独立的值，这个状态值是函数中的一个常量。</p><p>任意一次渲染中的count常量都不会随着时间改变。渲染输出会变是因为我们的组件被一次次调用，而每一次调用引起的渲染中，它包含的count值独立于其他渲染。</p><h2 id="每次渲染都有它自己的事件处理函数"><a href="#每次渲染都有它自己的事件处理函数" class="headerlink" title="每次渲染都有它自己的事件处理函数"></a>每次渲染都有它自己的事件处理函数</h2><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> App = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [temp, setTemp] = React.useState(<span class="hljs-number">5</span>);<br><br>  <span class="hljs-keyword">const</span> log = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;3 秒前 temp = 5，现在 temp =&quot;</span>, temp);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">        log();</span><br><span class="xml">        setTemp(3);</span><br><span class="xml">        // 3 秒前 temp = 5，现在 temp = 5</span><br><span class="xml">      &#125;&#125;</span><br><span class="xml">    &gt;</span><br><span class="xml">      xyz</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>上述代码输出 5，而不是 3</p><p>log 函数执行的那个 render 过程， temp 可以看作常量 5。执行 setTemp(3) 后会由一个全新的 render 渲染。所以不会执行 log 函数。而 3 秒后执行的内容是由 temp 为 5 的那个 render 发出的。所以结果为 5。</p><h2 id="每次-Render-都有自己的-Effects"><a href="#每次-Render-都有自己的-Effects" class="headerlink" title="每次 Render 都有自己的 Effects"></a>每次 Render 都有自己的 Effects</h2><p>useEffect 在 DOM 渲染完毕后执行， 也一样拿到的是某次渲染时的值。</p><p>每次 render 过程，拿到的 count 都是固化的常量。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="单次渲染内，props-和-state-始终保持不变"><a href="#单次渲染内，props-和-state-始终保持不变" class="headerlink" title="单次渲染内，props 和 state 始终保持不变"></a>单次渲染内，props 和 state 始终保持不变</h2><p>所以，每一个组件内的函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获某次渲染中定义的props 和 state。</p><p>下面两个例子是相等的：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(props.counter);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> counter = props.counter;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(counter);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>在组件内，什么时候读 props 和 state 都一样。在单次渲染内，他们始终保持不变。</p><h2 id="如何拿最新的值，而不是捕获的值"><a href="#如何拿最新的值，而不是捕获的值" class="headerlink" title="如何拿最新的值，而不是捕获的值"></a>如何拿最新的值，而不是捕获的值</h2><p>useRef 可以绕过 Capture Value 的特性。可以认为 ref 在所有 Render 过程中保持着唯一引用，因此所有对 ref 的赋值或取值，拿到的都只有一个最终状态，而不会在每个 Render 间存在隔离。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> latestCount = useRef(count);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// Set the mutable latest value</span><br>    latestCount.current = count;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// Read the mutable latest value</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;latestCount.current&#125;</span> times`</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br></code></pre></div></td></tr></table></figure><p>也可以认为，ref 是 Mutable 的，而 state 是 Immutable 的。</p><h2 id="useEffect-回收机制"><a href="#useEffect-回收机制" class="headerlink" title="useEffect 回收机制"></a>useEffect 回收机制</h2><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);<br>    &#125;;<br>  &#125;);<br></code></pre></div></td></tr></table></figure><p>假设第一次渲染的时候props是{id: 10}，第二次渲染的时候是{id: 20}。你可能认为顺序如下：</p><ul><li>React 清除了 {id: 10}的effect。</li><li>React 渲染{id: 20}的UI。</li><li>React 运行{id: 20}的effect。</li></ul><p>实际上并不是这样，react 只会在浏览器绘制之后运行 useEffect。上一次的 effect 会在重新渲染后被清楚。</p><ul><li>React 渲染{id: 20}的UI。</li><li>浏览器绘制。我们在屏幕上看到{id: 20}的UI。</li><li>React 清除{id: 10}的effect。</li><li>React 运行{id: 20}的effect。</li></ul><p>那为什么清楚上一次的 effect 发生在 props 变为 {id: 20} 之后，却还能看到旧的 {id: 10} ？</p><p>effect的清除并不会读取“最新”的props。它只能读取到定义它的那次渲染中的props值。由于 Capture Value 特性，每次 “注册” “回收” 拿到的都是成对的固定值。</p><p>确切的说清除上一次的副作用发生在“每次重新渲染之后，副作用函数重新运行执行”。</p><h2 id="同步，而非生命周期"><a href="#同步，而非生命周期" class="headerlink" title="同步，而非生命周期"></a>同步，而非生命周期</h2><p>React会根据我们当前的props和state同步到DOM。“mount”和“update”之于渲染并没有什么区别。</p><p>用相同的方式去思考effects。useEffect使你能够根据props和state同步React tree之外的东西。</p><h2 id="告诉-React-如何对比-Effect"><a href="#告诉-React-如何对比-Effect" class="headerlink" title="告诉 React 如何对比 Effect"></a>告诉 React 如何对比 Effect</h2><p>react 在 DOM渲染时会 diff 内容，只对改变的部分做修改。但是对于 effect 却做不到这样。</p><p>如何避免 effect 重复调用，需要给 effect 提供一个 deps，deps 内变量改变的时候才执行。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;Hello, &#x27;</span> + name;<br>  &#125;, [name]); <span class="hljs-comment">// Our deps</span><br></code></pre></div></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://overreacted.io/a-complete-guide-to-useeffect/">a-complete-guide-to-useeffect</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>React Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>useEffect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 中常用 TS 类型</title>
    <link href="/posts/25e26362/"/>
    <url>/posts/25e26362/</url>
    
    <content type="html"><![CDATA[<h2 id="函数组件注解"><a href="#函数组件注解" class="headerlink" title="函数组件注解"></a>函数组件注解</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> Test = React.FC&lt;Props&gt;<br></code></pre></div></td></tr></table></figure><h2 id="类组件注解"><a href="#类组件注解" class="headerlink" title="类组件注解"></a>类组件注解</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">Props</span>,<span class="hljs-title">States</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="泛型-class-组件"><a href="#泛型-class-组件" class="headerlink" title="泛型 class 组件"></a>泛型 class 组件</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> SelectProps&lt;T&gt; &#123;<br>  <span class="hljs-attr">items</span>: T[]<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Select</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">SelectProps</span>&lt;<span class="hljs-title">T</span>&gt;, </span>&#123;&#125;&gt; &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">const</span> Form = <span class="hljs-function">() =&gt;</span> &lt;Select&lt;<span class="hljs-built_in">string</span>&gt; items=&#123;[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]&#125; /&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 笔记</title>
    <link href="/posts/81dvefb9/"/>
    <url>/posts/81dvefb9/</url>
    
    <content type="html"><![CDATA[<h2 id="声明空间"><a href="#声明空间" class="headerlink" title="声明空间"></a>声明空间</h2><p>ts 中有两种：类型声明空间与变量声明空间</p><p>类型声明空间：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;&#125;<br><span class="hljs-keyword">interface</span> Bar &#123;&#125;<br><span class="hljs-keyword">type</span> Bas = &#123;&#125;;<br></code></pre></div></td></tr></table></figure><p>如下当做类型注解使用</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> foo: Foo;<br><span class="hljs-keyword">let</span> bar: Bar;<br><span class="hljs-keyword">let</span> bas: Bas;<br></code></pre></div></td></tr></table></figure><p>定义 interface Bar {} 不能当做变量来用，因为它没有定义在变量声明空间中。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>如下方式定义在 <strong>全局模块</strong> 中</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> foo = <span class="hljs-number">123</span>;<br></code></pre></div></td></tr></table></figure><p>如下方式文件的根级别位置含有 import 或者 export,在文件中创建本地作用域，是定义在 <strong>文件模块</strong> 中</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> foo = <span class="hljs-number">123</span>;<br></code></pre></div></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间一个最明确的目的就是解决重名问题。</p><p>命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象。作用是将一系列相关的全局变量组织到一个对象的属性。</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">namespace</span> Letter &#123; <br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>; <br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span>; <br>&#125; <br></code></pre></div></td></tr></table></figure><p>编译成 js 如下：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">var</span> Letter; <br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Letter</span>) </span>&#123; <br>    Letter.a = <span class="hljs-number">1</span>; <br>    Letter.b = <span class="hljs-number">2</span>; <br>&#125;)(Letter || (Letter = &#123;&#125;)); <br></code></pre></div></td></tr></table></figure><h2 id="动态导入表达式-import"><a href="#动态导入表达式-import" class="headerlink" title="动态导入表达式 import()"></a>动态导入表达式 import()</h2><p>import() 异步加载一个模块, 该语句用于 Webpack Code Splitting。</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;momentjs&quot; */</span> <span class="hljs-string">&#x27;moment&#x27;</span>)<br>  .then(<span class="hljs-function"><span class="hljs-params">moment</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> time = moment().format();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;TypeScript &gt;= 2.4.0 Dynamic Import Expression:&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(time);<br>  &#125;)<br>  .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Failed to load moment&#x27;</span>, err);<br>  &#125;);<br></code></pre></div></td></tr></table></figure><h2 id="TS-类型系统"><a href="#TS-类型系统" class="headerlink" title="TS 类型系统"></a>TS 类型系统</h2><p>原始类型 string、number、boolean 可以被用作类型注解。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>两种方式定义数组：</p><p>1、元素类型后加 []</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><p>2、 数组泛型 Array&lt;元素类型&gt;</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">Array</span>&lt;number&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>合并众多类型声明至一个类型声明</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Name &#123;<br>  <span class="hljs-attr">first</span>: <span class="hljs-built_in">string</span>;<br>  second: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> name: Name = &#123;<br>  <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>  <span class="hljs-attr">second</span>: <span class="hljs-string">&#x27;Doe&#x27;</span><br>&#125;;<br><br></code></pre></div></td></tr></table></figure><h2 id="内联类型注解"><a href="#内联类型注解" class="headerlink" title="内联类型注解"></a>内联类型注解</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> name: &#123;<br>  <span class="hljs-attr">first</span>: <span class="hljs-built_in">string</span>;<br>  second: <span class="hljs-built_in">string</span>;<br>&#125;;<br><br>name = &#123;<br>  <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>  <span class="hljs-attr">second</span>: <span class="hljs-string">&#x27;Doe&#x27;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>内联类型注解可以省去为类型起名的麻烦。</p><p>如果你发现需要多次使用相同的内联注解时，那么考虑把它重构为一个接口（或者是 type alias)</p><h2 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h2><p>any、 null、 undefined 以及 void</p><p>:void 来表示一个函数没有一个返回值</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">void</span> </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(message);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">items: T[]</span>): <span class="hljs-title">T</span>[] </span>&#123;<br>  <span class="hljs-keyword">const</span> toreturn = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = items.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    toreturn.push(items[i]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> toreturn;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>多种类型之一</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatCommandline</span>(<span class="hljs-params">command: <span class="hljs-built_in">string</span>[] | <span class="hljs-built_in">string</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> line = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> command === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    line = command.trim();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    line = command.join(<span class="hljs-string">&#x27; &#x27;</span>).trim();<br>  &#125;<br><br>  <span class="hljs-comment">// Do stuff with line: string</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>extend 是一种非常常见的模式，从两个对象中创建一个新对象，新对象拥有着两个对象所有的功能。</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extend</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">object</span>, <span class="hljs-title">U</span> <span class="hljs-title">extends</span> <span class="hljs-title">object</span>&gt;(<span class="hljs-params">first: T, second: U</span>): <span class="hljs-title">T</span> &amp; <span class="hljs-title">U</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> result = &lt;T &amp; U&gt;&#123;&#125;;<br>  for (let id in first) &#123;<br>    (&lt;T&gt;result)[id] = first[id];<br>  &#125;<br>  for (let id in second) &#123;<br>    if (!result.hasOwnProperty(id)) &#123;<br>      (&lt;U&gt;result)[id] = second[id];<br>    &#125;<br>  &#125;<br><br>  return result;<br>&#125;<br><br>const x = extend(&#123; a: &#x27;hello&#x27; &#125;, &#123; b: 42 &#125;);<br><br>// 现在 x 拥有了 a 属性与 b 属性<br>const a = x.a;<br>const b = x.b;<br></code></pre></div></td></tr></table></figure><h2 id="元祖类型-Tuple"><a href="#元祖类型-Tuple" class="headerlink" title="元祖类型 Tuple"></a>元祖类型 Tuple</h2><p>固定长度的，元素数据类型不同的数组。数据不可变。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">type FixedArray = [string, number, string];<br><br><span class="hljs-keyword">const</span> mixedArray: FixedArray = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br></code></pre></div></td></tr></table></figure><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>以为任意的类型注解提供类型别名,在联合类型和交叉类型中比较实用。</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> StrOrNum = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">let</span> sample: StrOrNum;<br>sample = <span class="hljs-number">123</span>;<br>sample = <span class="hljs-string">&#x27;123&#x27;</span>;<br><br><span class="hljs-comment">// 会检查类型</span><br>sample = <span class="hljs-literal">true</span>; <span class="hljs-comment">// Error</span><br></code></pre></div></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Text = <span class="hljs-built_in">string</span> | &#123; <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span> &#125;;<br><span class="hljs-keyword">type</span> Coordinates = [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>];<br><span class="hljs-keyword">type</span> Callback = <span class="hljs-function">(<span class="hljs-params">data: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br></code></pre></div></td></tr></table></figure><h2 id="types"><a href="#types" class="headerlink" title="@types"></a>@types</h2><p>通过 npm 来安装使用 @types,如 <code>npm install @types/jquery --save-dev</code></p><h2 id="declare-声明文件"><a href="#declare-声明文件" class="headerlink" title="declare 声明文件"></a>declare 声明文件</h2><p>.d.ts文件是ts用来声明变量，模块，type，interface等等的。</p><p>在这种后缀的ts文件声明这些东西和在纯ts文件声明这些东西又什么区别呢？</p><p>在.d.ts声明变量或者模块等东西之后，在其他地方可以不用import导入这些东西就可以直接用，用，而且有语法提示。</p><p>declare声明一个类型:</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> Asd &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在tsconfig.json文件里面的include数组里面添加这个文件, 在include包含的文件范围内可以直接使用Asd这个type。</p><p>declare声明一个模块:</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-built_in">module</span> <span class="hljs-string">&#x27;*.css&#x27;</span>;<br><span class="hljs-keyword">declare</span> <span class="hljs-built_in">module</span> <span class="hljs-string">&#x27;*.less&#x27;</span>;<br><span class="hljs-keyword">declare</span> <span class="hljs-built_in">module</span> <span class="hljs-string">&#x27;*.png&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>编译ts文件的时候，导入一个.css/.less/.png格式的文件，如果没有经过declare的话是会提示语法错误的</p><p>declare声明一个变量:</p><p>在项目中引入了一个sdk，这个sdk（我们以微信的sdk为例）里面有一些全局的对象（比如wx），但是如果不经过任何的声明，在ts文件里面直接用wx.config()的话，肯定会报错。</p><p>declare声明一个作用域:</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">namespace</span> API &#123;<br>    <span class="hljs-keyword">interface</span> ResponseList &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>声明完之后在其他地方的ts就可以直接API.ResponseList引用到这个接口类型</p><h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><p>两种声明方式：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 内联注解</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> myPoint: &#123; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>; y: <span class="hljs-built_in">number</span> &#125;;<br><br><span class="hljs-comment">// 接口形式</span><br><span class="hljs-keyword">interface</span> Point &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>  y: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> myPoint: Point;<br></code></pre></div></td></tr></table></figure><p>接口形式的好处在于，如果有人创建了一个基于 myPoint 的库来添加新成员, 可以轻松将此成员添加到 myPoint 的现有声明中</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// Lib a.d.ts</span><br><span class="hljs-keyword">interface</span> Point &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> myPoint: Point<br><br><span class="hljs-comment">// Lib b.d.ts</span><br><span class="hljs-keyword">interface</span> Point &#123;<br>  <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-comment">// Your code</span><br>myPoint.z <span class="hljs-comment">// Allowed!</span><br></code></pre></div></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>函数重载，必须要把精确的定义放在前面，最后函数实现时，需要使用 |操作符或者?操作符，把所有可能的输入类型全部包含进去，以具体实现。</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 上边是声明</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">string</span>, arg2: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">number</span>, arg2: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span></span></span><br><span class="hljs-function"><span class="hljs-function">// 因为我们在下边有具体函数的实现，所以这里并不需要添加 <span class="hljs-title">declare</span> 关键字</span></span><br><span class="hljs-function"><span class="hljs-function"></span></span><br><span class="hljs-function"><span class="hljs-function">// 下边是实现</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>, arg2: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>) </span>&#123;</span></span><br><span class="hljs-function"><span class="hljs-function">  // 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 <span class="hljs-title">arg1</span> + <span class="hljs-title">arg2</span></span></span><br><span class="hljs-function"><span class="hljs-function">  <span class="hljs-title">if</span> (<span class="hljs-params"><span class="hljs-keyword">typeof</span> arg1 === <span class="hljs-string">&#x27;string&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> arg2 === <span class="hljs-string">&#x27;string&#x27;</span></span>) </span>&#123;</span><br><span class="hljs-function">    <span class="hljs-title">return</span> <span class="hljs-title">arg1</span> + <span class="hljs-title">arg2</span></span><br><span class="hljs-function">  &#125; <span class="hljs-title">else</span> <span class="hljs-title">if</span> (<span class="hljs-params"><span class="hljs-keyword">typeof</span> arg1 === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> arg2 === <span class="hljs-string">&#x27;number&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arg1 + arg2<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>函数重载的意义在于能够让你知道传入不同的参数得到不同的结果，如果传入的参数不同，但是得到的结果（类型）却相同，那么不要使用函数重载（没有意义）。<br>如果函数的返回值类型相同，那么也不需要使用函数重载</p><p>以下场景可以不需要重载：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params">a: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span></span></span><br><span class="hljs-function"><span class="hljs-function"></span></span><br><span class="hljs-function"><span class="hljs-function">// 像这样的是参数个数的区别，我们可以使用可选参数来代替函数重载的定义</span></span><br><span class="hljs-function"><span class="hljs-function"></span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b?: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span></span></span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 亦或是一些参数类型的区别导致的</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params">a: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params">a: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span></span></span><br><span class="hljs-function"><span class="hljs-function"></span></span><br><span class="hljs-function"><span class="hljs-function">// 这时我们应该使用联合类型来代替函数重载</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span> (<span class="hljs-params">a: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span></span></span></span><br></code></pre></div></td></tr></table></figure><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>在没有提供函数实现的情况下，有两种声明函数类型的方式:</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> LongHand = &#123;<br>  (a: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span>;<br>&#125;; <span class="hljs-comment">//当你想使用函数重载时, 只能用此方式</span><br><br><span class="hljs-keyword">type</span> ShortHand = <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span>;<br></code></pre></div></td></tr></table></figure><h2 id="可调用的类型注解"><a href="#可调用的类型注解" class="headerlink" title="可调用的类型注解"></a>可调用的类型注解</h2><p>使用类型别名或者接口来表示一个可被调用的类型注解：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> ReturnString &#123;<br>  (): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">// 表示一个返回值为 string 的函数：</span><br></code></pre></div></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> foo: ReturnString;<br><br><span class="hljs-keyword">const</span> bar = foo(); <span class="hljs-comment">// bar 被推断为一个字符串。</span><br></code></pre></div></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>ts 允许你覆盖它的推断，并且能以你任何你想要的方式分析它</p><p>js 迁移到 ts 时常见：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> foo = &#123;&#125;;<br>foo.bar = <span class="hljs-number">123</span>; <span class="hljs-comment">// Error: &#x27;bar&#x27; 属性不存在于 ‘&#123;&#125;’</span><br>foo.bas = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">// Error: &#x27;bas&#x27; 属性不存在于 &#x27;&#123;&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure><p>foo 类型推断为 {}，不存在属性。通过类型断言来避免该问题</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Foo &#123;<br>  <span class="hljs-attr">bar</span>: <span class="hljs-built_in">number</span>;<br>  bas: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> foo = &#123;&#125; <span class="hljs-keyword">as</span> Foo;<br>foo.bar = <span class="hljs-number">123</span>;<br>foo.bas = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="允许额外的属性"><a href="#允许额外的属性" class="headerlink" title="允许额外的属性"></a>允许额外的属性</h2><p>包含索引签名，以明确表明可以使用额外的属性：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> x: &#123; <span class="hljs-attr">foo</span>: <span class="hljs-built_in">number</span>, [x: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;;<br><br>x = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">2</span> &#125;; <span class="hljs-comment">// ok, &#x27;baz&#x27; 属性匹配于索引签名</span><br></code></pre></div></td></tr></table></figure><p>React State 中示例：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 假设</span><br><span class="hljs-keyword">interface</span> State &#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-built_in">string</span>;<br>  bar: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-comment">// 你可能想做：</span><br><span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;Hello&#x27;</span> &#125;); <span class="hljs-comment">// Error: 没有属性 &#x27;bar&#x27;</span><br><br><span class="hljs-comment">// 因为 state 包含 &#x27;foo&#x27; 与 &#x27;bar&#x27;，TypeScript 会强制你这么做：</span><br><span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-built_in">this</span>.state.bar &#125;);<br></code></pre></div></td></tr></table></figure><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><p>ts 会推到条件块中的变量类型</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSome</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 在这个块中，TypeScript 知道 `x` 的类型必须是 `string`</span><br>    <span class="hljs-built_in">console</span>.log(x.subtr(<span class="hljs-number">1</span>)); <span class="hljs-comment">// Error: &#x27;subtr&#x27; 方法并没有存在于 `string` 上</span><br>    <span class="hljs-built_in">console</span>.log(x.substr(<span class="hljs-number">1</span>)); <span class="hljs-comment">// ok</span><br>  &#125;<br><br>  x.substr(<span class="hljs-number">1</span>); <span class="hljs-comment">// Error: 无法保证 `x` 是 `string` 类型</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>in 操作符可以一个对象上是否存在一个属性，它通常也被作为类型保护使用</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> A &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> B &#123;<br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doStuff</span>(<span class="hljs-params">q: A | B</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">in</span> q) &#123;<br>    <span class="hljs-comment">// q: A</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// q: B</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><p>字面量类型本身不使用，在一个联合类型中组合创建一个强大的（实用的）抽象。</p><p>字符串字面量：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> foo: <span class="hljs-string">&#x27;Hello&#x27;</span>;<br>foo = <span class="hljs-string">&#x27;Bar&#x27;</span>; <span class="hljs-comment">// Error: &#x27;bar&#x27; 不能赋值给类型 &#x27;Hello&#x27;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> CardinalDirection = <span class="hljs-string">&#x27;North&#x27;</span> | <span class="hljs-string">&#x27;East&#x27;</span> | <span class="hljs-string">&#x27;South&#x27;</span> | <span class="hljs-string">&#x27;West&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params">distance: <span class="hljs-built_in">number</span>, direction: CardinalDirection</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br>move(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;North&#x27;</span>); <span class="hljs-comment">// ok</span><br>move(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Nurth&#x27;</span>); <span class="hljs-comment">// Error</span><br></code></pre></div></td></tr></table></figure><p>boolean 和 number 的字面量类型：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> OneToFive = <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br><span class="hljs-keyword">type</span> Bools = <span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">config: &#123; <span class="hljs-keyword">readonly</span> bar: <span class="hljs-built_in">number</span>, <span class="hljs-keyword">readonly</span> bas: <span class="hljs-built_in">number</span> &#125;</span>) </span>&#123;<br>  <span class="hljs-comment">// ..</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Foo = &#123;<br>  <span class="hljs-keyword">readonly</span> bar: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-keyword">readonly</span> bas: <span class="hljs-built_in">number</span>;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure><p>这有一个 Readonly 的映射类型，它接收一个泛型 T，用来把它的所有属性标记为只读类型：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Foo = &#123;<br>  <span class="hljs-attr">bar</span>: <span class="hljs-built_in">number</span>;<br>  bas: <span class="hljs-built_in">number</span>;<br>&#125;;<br><br><span class="hljs-keyword">type</span> FooReadonly = Readonly&lt;Foo&gt;;<br></code></pre></div></td></tr></table></figure><h2 id="泛型2"><a href="#泛型2" class="headerlink" title="泛型2"></a>泛型2</h2><p>创建泛型类</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 创建一个泛型类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">private</span> data: T[] = [];<br>  push = <span class="hljs-function">(<span class="hljs-params">item: T</span>) =&gt;</span> <span class="hljs-built_in">this</span>.data.push(item);<br>  pop = (): T | <span class="hljs-function"><span class="hljs-params">undefined</span> =&gt;</span> <span class="hljs-built_in">this</span>.data.shift();<br>&#125;<br><br><span class="hljs-comment">// 简单的使用</span><br><span class="hljs-keyword">const</span> queue = <span class="hljs-keyword">new</span> Queue&lt;<span class="hljs-built_in">number</span>&gt;();<br>queue.push(<span class="hljs-number">0</span>);<br>queue.push(<span class="hljs-string">&#x27;1&#x27;</span>); <span class="hljs-comment">// Error：不能推入一个 `string`，只有 number 类型被允许</span><br></code></pre></div></td></tr></table></figure><p>泛型的误用：近在单个参数或一个位置被使用</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">arg: T</span>): <span class="hljs-title">void</span></span>;  <br><span class="hljs-comment">// </span><br><span class="hljs-keyword">declare</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">arg: <span class="hljs-built_in">any</span></span>): <span class="hljs-title">void</span></span>;<br></code></pre></div></td></tr></table></figure><p>axios 请求中 泛型的使用：</p><p>通常情况下，我们会把后端返回数据格式单独放入一个 interface 里：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 请求接口数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> ResponseData&lt;T = any&gt; &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 状态码</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type <span class="hljs-type">&#123; number &#125;</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type <span class="hljs-type">&#123; T &#125;</span></span></span><br><span class="hljs-comment">   */</span><br>  result: T;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 消息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type <span class="hljs-type">&#123; string &#125;</span></span></span><br><span class="hljs-comment">   */</span><br>  message: <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 在 axios.ts 文件中对 axios 进行了处理，例如添加通用配置、拦截器等</span><br><span class="hljs-keyword">import</span> Ax <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./axios&#x27;</span>;<br><br><span class="hljs-keyword">import</span> &#123; ResponseData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./interface.ts&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> Ax.get&lt;ResponseData&lt;T&gt;&gt;(<span class="hljs-string">&#x27;/somepath&#x27;</span>)<br>    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.data)<br>    .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(err));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>写入返回的数据类型 User</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> User &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  age: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// user 被推断出为</span><br>  <span class="hljs-comment">// &#123;</span><br>  <span class="hljs-comment">//  code: number,</span><br>  <span class="hljs-comment">//  result: &#123; name: string, age: number &#125;,</span><br>  <span class="hljs-comment">//  message: string</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> getUser&lt;User&gt;();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h2><p>常用在</p><ul><li>从来不会有返回值的函数（如：如果函数内含有 while(true) {}）</li><li>总是会抛出错误的函数 throw new Error</li></ul><p>never 类型仅能被赋值给另外一个 never</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> bar: <span class="hljs-built_in">never</span> = (<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Throw my hands in the air like I just dont care&#x27;</span>);<br>&#125;)();<br></code></pre></div></td></tr></table></figure><p>void 和 never 的区别：</p><ul><li>void 表示没有任何类型，never 表示永远不存在的值的类型。</li><li>当一个函数返回空值时，它的返回值为 void 类型，但是，当一个函数永不返回时（或者总是抛出错误），它的返回值为 never 类型。</li><li>void 类型可以被赋值，但是除了 never 本身以外，其他任何类型不能赋值给 never。</li></ul><h2 id="redux-中的联合类型"><a href="#redux-中的联合类型" class="headerlink" title="redux 中的联合类型"></a>redux 中的联合类型</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<br><br><span class="hljs-keyword">type</span> Action =<br>  | &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;INCREMENT&#x27;</span>;<br>    &#125;<br>  | &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;DECREMENT&#x27;</span>;<br>    &#125;;<br><br><span class="hljs-comment">//reducer</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">counter</span>(<span class="hljs-params">state = <span class="hljs-number">0</span>, action: Action</span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;INCREMENT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;DECREMENT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> state;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="索引签名"><a href="#索引签名" class="headerlink" title="索引签名"></a>索引签名</h2><p>声明一个索引签名时，所有明确的成员都必须符合索引签名：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Bar &#123;<br>  [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">number</span>;<br>  x: <span class="hljs-built_in">number</span>;<br>  y: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// Error: y 属性必须为 number 类型</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>映射类型来使索引字符串为联合类型中的一员</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Index = <span class="hljs-string">&#x27;a&#x27;</span> | <span class="hljs-string">&#x27;b&#x27;</span> | <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-keyword">type</span> FromIndex = &#123; [k <span class="hljs-keyword">in</span> Index]?: <span class="hljs-built_in">number</span> &#125;;<br><br><span class="hljs-keyword">const</span> bad: FromIndex = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span> &#125;; <span class="hljs-comment">//err</span><br></code></pre></div></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> FromSomeIndex&lt;K <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span>&gt; = &#123; [key <span class="hljs-keyword">in</span> K]: <span class="hljs-built_in">number</span> &#125;;<br></code></pre></div></td></tr></table></figure><h2 id="索引签名中排除某些属性"><a href="#索引签名中排除某些属性" class="headerlink" title="索引签名中排除某些属性"></a>索引签名中排除某些属性</h2><p>用交叉类型解决</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> FieldState = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-built_in">string</span>;<br>&#125;;<br><br><span class="hljs-keyword">type</span> FromState = &#123;<br>  <span class="hljs-attr">isValid</span>: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// Error: 不符合索引签名</span><br>  [filedName: <span class="hljs-built_in">string</span>]: FieldState;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>交叉类型：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> FieldState = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-built_in">string</span>;<br>&#125;;<br><br><span class="hljs-keyword">type</span> FormState = &#123; <span class="hljs-attr">isValid</span>: <span class="hljs-built_in">boolean</span> &#125; &amp; &#123; [fieldName: <span class="hljs-built_in">string</span>]: FieldState &#125;;<br></code></pre></div></td></tr></table></figure><h2 id="流动的类型"><a href="#流动的类型" class="headerlink" title="流动的类型"></a>流动的类型</h2><p>捕获变量的类型</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> foo = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> bar: <span class="hljs-keyword">typeof</span> foo; <span class="hljs-comment">// &#x27;bar&#x27; 类型与 &#x27;foo&#x27; 类型相同（在这里是： &#x27;number&#x27;）</span><br></code></pre></div></td></tr></table></figure><p>捕获类成员类型 需要声明一个变量</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 我们想要捕获的类型</span><br>&#125;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">let</span> _foo: Foo;<br><br><span class="hljs-comment">// 与之前做法相同</span><br><span class="hljs-keyword">let</span> bar: <span class="hljs-keyword">typeof</span> _foo.foo;<br></code></pre></div></td></tr></table></figure><p>捕获键的名称</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> colors = &#123;<br>  <span class="hljs-attr">red</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>  <span class="hljs-attr">blue</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">type</span> Colors = keyof <span class="hljs-keyword">typeof</span> colors;<br><br><span class="hljs-keyword">let</span> color: Colors; <span class="hljs-comment">// color 的类型是 &#x27;red&#x27; | &#x27;blue&#x27;</span><br>color = <span class="hljs-string">&#x27;red&#x27;</span>; <span class="hljs-comment">// ok</span><br>color = <span class="hljs-string">&#x27;blue&#x27;</span>; <span class="hljs-comment">// ok</span><br>color = <span class="hljs-string">&#x27;anythingElse&#x27;</span>; <span class="hljs-comment">// Error</span><br></code></pre></div></td></tr></table></figure><h2 id="JSX-的支持"><a href="#JSX-的支持" class="headerlink" title="JSX 的支持"></a>JSX 的支持</h2><p>函数组件</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Props = &#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-built_in">string</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> MyComponent: React.FunctionComponent&lt;Props&gt; = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;props.foo&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>;<br>&#125;;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">foo</span>=<span class="hljs-string">&quot;bar&quot;</span> /&gt;</span></span>;<br></code></pre></div></td></tr></table></figure><p>类组件</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Props = &#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-built_in">string</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">Props</span>, </span>&#123;&#125;&gt; &#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;this.props.foo&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br>&lt;MyComponent foo=<span class="hljs-string">&quot;bar&quot;</span> /&gt;;<br></code></pre></div></td></tr></table></figure><p>泛型组件</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 一个泛型组件</span><br><span class="hljs-keyword">type</span> SelectProps&lt;T&gt; = &#123; <span class="hljs-attr">items</span>: T[] &#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Select</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">SelectProps</span>&lt;<span class="hljs-title">T</span>&gt;, <span class="hljs-title">any</span>&gt; </span>&#123;&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">const</span> Form = <span class="hljs-function">() =&gt;</span> &lt;Select&lt;<span class="hljs-built_in">string</span>&gt; items=&#123;[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]&#125; /&gt;;<br></code></pre></div></td></tr></table></figure><p>泛型函数</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">x: T</span>): <span class="hljs-title">T</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// 不能使用箭头函数</span><br><span class="hljs-keyword">const</span> foo = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">x: T</span>) =&gt;</span> T; <span class="hljs-comment">// Error: T 标签没有关闭</span><br><br>解决办法：用 <span class="hljs-keyword">extends</span> 提示编译器这是泛型<br><span class="hljs-keyword">const</span> foo = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">T</span> <span class="hljs-attr">extends</span> &#123;&#125;&gt;</span>(x: T) =&gt; x;</span><br></code></pre></div></td></tr></table></figure><p>Refs</p><p>一个变量时，使用 ref 和 null 的联合类型</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Use</span> </span>&#123;<br>  <span class="hljs-attr">exampleRef</span>: Example | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;exampleRef</span> =&gt;</span> (this.exampleRef = exampleRef)&#125; /&gt;</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://jkchao.github.io/typescript-book-chinese/">深入理解 TypeScript</a></li><li><a href="https://www.tslang.cn/docs/handbook/generics.html">https://www.tslang.cn/docs/handbook/generics.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大厂面试题</title>
    <link href="/posts/83dcefb7/"/>
    <url>/posts/83dcefb7/</url>
    
    <content type="html"><![CDATA[<p>腾讯<br>一面</p><ol><li>写一个 LRU 缓存函数</li><li>写个防抖和节流函数</li><li>你们服务是怎么部署的?Node Agent 做了什么工作?</li><li>Grpc 的优缺点?</li><li>http2 的相关特性?</li><li>viewport 和移动端布局方案</li><li>实现一个 compose 函数</li><li>开发中有遇到过比较难定位的问题吗?Node 内存泄露有遇到过 吗?<br>二面</li><li>react ssr 是在什么场景下做的?</li><li>react ssr 双端怎么做构建的?区别在哪里?</li><li>有没有做过同构组件?服务端和客户端怎么同步状态的?</li><li>render 和 renderToString 的底层实现上的区别?</li><li>客户端怎么处理 JS 事件失效的问题?客户端不重新加载 JS 的 情况下怎么实现?</li><li>做服务端渲染的时候有没有遇到过比较难的点?</li><li>react ssr 和 ejs 性能的差异?</li><li>服务回滚是怎么做的?上线流程是怎样的?k8s 回滚、拉取以前的 镜像</li><li>webpack plugin 的原理是什么?</li><li>plugin 中有异步请求会阻塞后面的 plugin 吗?</li><li>做过哪些 webpack 的性能优化?</li><li>hard-source-webpack-plugin 是怎么做缓存的?修改文件后会 怎么样?</li><li>parallel 的原理是什么?多个子进程怎么通信?</li><li>你们 webpack 是怎么做拆包的? </li><li>服务端监控是怎么做的?服务有上报过什么指标?</li><li>Node 服务怎么去定位 CPU 占用暴涨的情况?怎么去定位内存泄<br>露?</li><li>编写 grpc 服务和 http 服务的区别?</li><li>做过哪些 react 相关的优化?函数组件怎么实现 shouldComponentUpdate?</li><li>如果有一个非常大的 react 页面，我想优先渲染某一部分，这该怎 么做?</li><li>react 函数组件和 class 组件里面 state 的区别?</li><li>react useEffect 对应 class 组件的哪些生命周期? 22.前端的监控是怎么做的?除了 sentry 还做了其他异常处理吗?<br>三面</li><li>讲一下你做的比较复杂的项目?以及你在项目中担当了什么角色?</li><li>你是怎么看待现在各种造轮子的?</li><li>有一个一亿长度的字符串，怎么存储设计可以让它更好去查询、修<br>改?</li><li>怎么优化 H5 让它可以在 300ms 之内打开?</li><li>你们 WebView 加载一般耗时多久?</li><li>你们为什么从 Python 重构到 Node?好处是什么?</li><li>你是怎么看待做后台管理系统的?很多人觉得它没有难点，你觉得 呢?(问这个问题是因为我现在在做后台管理系统)<br>总监面(有点儿记不清了)</li><li>新加坡和深圳内网是怎么连通的?</li><li>未来的职业规划是什么样的?</li><li>对当前新的技术有了解吗?</li><li>对客户端知识有了解吗?</li><li>为什么要离职?拒了，岗位不是很喜欢</li></ol><p>拼多多<br>一面</p><ol><li>有没有做过比较复杂的页面?携程的 React-imvc 做了什么? </li><li>使用 Redux 的好处，以及和 Mobx 的区别</li><li>对 React 最新特性有了解吗?class 组件和函数组件的区别? </li><li>useState 为什么不能放到条件语句里面?</li><li>实现一个 Promise.all</li><li>React SSR 是怎么实现的?</li><li>有用过代码规范相关的吗?Eslint 和 Prettier 冲突怎么解决? </li><li>实现一个数组转树形结构的函数<br>二面</li><li>说几个你觉得足够复杂的项目? </li><li>你是怎么去做 React SSR 的?</li><li>有没有做过性能优化相关的?</li><li>实现一个深拷贝</li><li>实现一个二叉搜索树转链表的方法 拒了，不想去卖命<br>商汤<br>一面</li><li>在工作中，主要是做什么内容?</li><li>有用过 lerna 吗?多个项目之间共用的东西怎么共享?</li><li>讲一讲微前端是怎么做的?怎么独立部署?子应用通信怎么做?</li><li>webpack 构建流程是怎样的?</li><li>webpack loader 和 plugin 的原理和区别?</li><li>webpack 热更新原理?</li><li>webpack 怎么做分包?</li><li>做过 webpack 性能优化吗?有用过 rollup 吗? </li><li>react-imvc 是什么?它做了什么?</li><li>react 和</li><li>redux 和 mobx 的区别和优劣?用过<br>react-dom 的区别是什么?<br>redux-saga 吗? 的复杂度，以及 react diff 的原理</li><li>react diff</li><li>react class 组件和 hooks 的区别? </li><li>什么是 TS 泛型?</li><li>从输入 url 到页面展示经过了哪些步骤?</li><li>讲一下重绘和回流</li><li>知道 BFC 吗?使用场景有哪些?</li><li>怎么判断是否为数组? </li><li>页面卡顿怎么去定位?</li><li>数组有 10 万个数据，取第一个和取第 10 万个的耗时多久? </li><li>有用过 canvas 相关的吗?</li><li>JS 垃圾回收机制?怎么定位 Node 内存泄露问题?</li><li>你是怎么理解前端的? </li><li>工作中遇到过最难的问题?有没有什么让你自豪的项目? </li><li>周末你都在做什么?学习前端的途径是什么?</li></ol><p>蚂蚁<br>一面</p><ol><li>React setState 怎么获取到更新后的值?异步函数中为什么 setState 会立即更新?</li><li>做过离线包吗?H5 离线包的原理?客户端根据什么拦截静态资源 请求?</li><li>JS Bridge 的原理?你们这套方案的 s 优缺点?</li><li>怎么判断 webview 是否加载完成?</li><li>怎么实现 App 头部和页面的背景渐变?</li><li>PC 端做过比较有意义的项目?</li><li>微前端子应用之间怎么通信?有没有了解过业界的一些方案? 二面</li><li>你们部署的 Jenkins 是怎么做的?</li><li>JS Bridge 原理?有没有安全漏洞?</li><li>有没有做过和安全相关的?waf 主要做了什么?</li><li>有没有做过埋点和性能上报相关?</li><li>如果你们用一个第三方的上报库，但页面加载这个 JS 失败了，还<br>想上报该怎么办?</li><li>实现两个大数相加</li><li>实现 DOM 字符串转虚拟 DOM 对象(不能用 DOM 相关的 api)</li><li>有木有做过你觉得比较困难的项目?<br>三面</li><li>管理系统都做了哪些业务?有没有做一些提高开发效率的东西?</li><li>常用的组件是哪个?解决了什么问题?</li><li>平时 Node 都用来做什么?怎么实现的?</li><li>SSR 的实现原理是什么?</li><li>项目中遇到的技术难点有哪些?</li><li>你觉得你们比 lazada 做得更好是哪些原因?</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中高级前端工程师面试题</title>
    <link href="/posts/a18c0ac9/"/>
    <url>/posts/a18c0ac9/</url>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>1、浏览器地址栏输入 URL 到页面打开的整个解析过程？</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>1、请你讲一下闭包?</p><blockquote><p>简单：闭包是有权限访问其他函数作用域内的变量的一个函数。</p><p>完整：由于在JS中，变量的作用域属于函数作用域，在函数执行后作用域就会被清理、内存也随之回收，但是由于闭包是建立在一个函数内部的子函数，由于其可访问上级作用域的原因，即使上级函数执行完，作用域也不会随之销毁，这时的子函数——也就是闭包，便拥有了访问上级作用域中的变量的权限，即使上级函数执行完后作用域内的值也不会被销毁。</p></blockquote><ul><li>闭包解决了什么？</li></ul><blockquote><p>由于闭包可以缓存上级作用域，那么就使得函数外部打破了“函数作用域”的束缚，可以访问函数内部的变量。以平时使用的Ajax成功回调为例，这里其实就是个闭包，由于上述的特性，回调就拥有了整个上级作用域的访问和操作能力，提高了极大的便利。开发者不用去写钩子函数来操作上级函数作用域内部的变量了。</p></blockquote><ul><li>闭包有哪些应用场景?</li></ul><blockquote><p>闭包随处可见，一个Ajax请求的成功回调，一个事件绑定的回调方法，一个setTimeout的延时回调，或者一个函数内部返回另一个匿名函数，这些都是闭包。简而言之，无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都有闭包的身影。</p></blockquote><ul><li>react hooks 中的 闭包陷阱问题如何解决？</li></ul><p>不管在这个组件中的其他地方使用 setCount 将 count 设置为任何值，还是设置多少次，打印的都是1</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">1</span>);<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(count)<br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;, [])<br>&#125;<br></code></pre></div></td></tr></table></figure><p>useRef</p><p>useState 更新值时传入回调函数</p><p>2、介绍一下 JS 里面的原型？</p><blockquote><p>每个对象都有一个 prototype 属性，就是原型，是一个对象，叫原型对象。</p></blockquote><ul><li>原型的作用是什么？</li></ul><blockquote><p>共享方法</p></blockquote><ul><li>原型中this的指向是什么？</li></ul><blockquote><p>原型中this的指向是实例。</p></blockquote><ul><li>说一下平时开发使用到 prototype 的例子？</li></ul><p>3、如何理解 es6 class 中 constructor 方法？ 和 super的作用？</p><blockquote><p>constructor 方法是类的构造函数。<br>通过 new 命令创建对象实例时，自动调用该方法。<br>constructor 内定义的方法是 实例方法；class 内直接定义的方法是原型方法。</p></blockquote><ul><li>super 的作用？</li></ul><p>子类是没有自己的 this 对象的，它只能继承自父类的 this 对象，然后对其进行加工，而super( )就是将父类中的this对象继承给子类的。没有 super，子类就得不到 this 对象。</p><ul><li>为什么要传入 props？</li></ul><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.props = props;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>确保了 this.props 在构造函数执行完毕之前已被赋值。</p><p>4、eventloop</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>1、介绍一下react diff 的工作原理？(待补充)</p><blockquote><p>React在界面刷新（setState）时，并不会马上对所有的DOM节点进行操作，而是先通过diff算法计算后，再对有变化的DOM节点进行操作（native是对原生UI层进行操作），刷新步骤如下：</p></blockquote><p>Virtual DOM 工作过程有：</p><div class="hljs code-wrapper"><pre><code class="hljs">1. state 变化，生成新的 Virtual Dom2. 比较 Virtual Dom 与之前 Virtual Dom 的异同3. 生成差异对象4. 遍历差异对象并更新真实 DOM</code></pre></div><p>2、react 里什么是高阶组件？使用高阶组件的场景？</p><blockquote><p>高阶组件(HOC)是接受一个组件并返回一个新组件的函数。</p></blockquote><p>2、React setState 怎么获取到更新后的值?异步函数中为什么 setState 会立即更新?</p><p>3、useState 为什么不能放到条件语句里面?</p><p>React通过单链表来管理Hooks。<br>update 阶段，每次调用 useState，链表就会执行 next 向后移动一步。如果将 useState 写在条件判断中，假设条件判断不成立，没有执行里面的 useState 方法，会导致接下来所有的 useState 的取值出现偏移，从而导致异常发生。</p><p>4、说一下 useRef 有哪些用法？</p><blockquote><p>useRef 除了获取 dom，另一个用法：<br>保存数据，不造成 rerender<br>想要保存数据，又不想触发函数的更新，该数据的更新不会造成组件 rerender</p></blockquote><p>5、什么情况下使用 useCallback ？<br>子组件接收一个方法，避免子组件重复渲染</p><ul><li>react 中只要父组件的 render 了，那么默认情况下就会触发子组的 render，react 提供了来避免这种重渲染的性能开销的一些方法：React.PureComponent、React.memo ，shouldComponentUpdate()</li><li>使用 React.memo 避免子组件做没必要的渲染。</li><li>Reace.memo 只会对 props 做浅比较，也就是父组件重新 render 之后会传入 不同引用的方法 getList，浅比较之后不相等，导致子组件还是依然会渲染。</li><li>useCallback 缓存一个函数，当依赖没有改变的时候，会一直返回同一个引用</li></ul><p>6、useCallback 与 useMemo 作用用来缓存，两者的区别是什么？</p><blockquote><p>useMemo 缓存值；useCallback 缓存函数</p></blockquote><p>注意不要滥用：</p><p>经常用在以下两种场景（要保持引用相等；对于组件内部用到的 object、array、函数等，如果用在了其他 Hook 的依赖数组中，或者作为 props 传递给了下游组件，应该使用 useMemo/useCallback）</p><p>7、react ssr 实现原理？react ssr 是在什么场景下做的？</p><p>server端接收到客户端的请求路由后，查找对应的数据，以props、context、store的形式注入组件中。然后基于react提供的API：renderToString将组件转换为html字符串输出到客户端。客户端使用该数据进行渲染，保证数据的一致性。</p><p>React SSR之所以能够实现，本质是虚拟 DOM的存在。判断环境是服务器环境，可以操作 JavaScript 对象，把虚拟 DOM 映射成字符串输出。判断环境是客户端环境，可以操作 JavaScript 对象，将虚拟 DOM 映射成真实 DOM ，完成页面挂载。</p><p>8、 react 项目里做过哪些性能优化？</p><p>代码层面：</p><ul><li>使用return null而不是CSS的display:none来控制节点的显示隐藏。保证同一时间页面的DOM节点尽可能的少。</li><li>props和state的数据尽可能简单明了，扁平化。</li><li>不要使用数组下标作为key</li><li>利用 shouldComponentUpdate 和 PureComponent 避免过多 render function</li><li>render里面尽量减少新建变量和bind函数，传递参数是尽量减少传递参数的数量。</li><li>尽量将 props 和 state 扁平化，只传递 component 需要的 props（传得太多，或者层次传得太深，都会加重shouldComponentUpdate里面的数据比较负担），慎将 component 当作 props 传入</li></ul><p>代码体积优化:</p><ul><li>使用 babel-plugin-import 优化业务组件的引入，实现按需加载</li><li>使用 生产版本</li><li>使用 SplitChunksPlugin 拆分公共代码</li><li>分析 CSS 和 JS 代码覆盖率</li><li>优化 Webpack 中的库</li><li>使用动态 import，懒加载 React 组件</li><li>使用 webpack-bundle-analyzer 可视化 webpack 输出文件的大小</li><li>使用动态 import，懒加载 React 组件</li><li>使用 Tree Shaking &amp; 教程 &amp; Tree Shaking 优化</li></ul><p>9、有 用 过 lerna 吗 ？ 多 个 项 目 之 间 共 用 的 东 西 怎 么 共 享 ？</p><p>10、使用 react 中，有没有遇到觉得比较难的点？是什么？</p><p>11、使用 hooks 中遇到过哪些坑？为什么？</p><ul><li>不要在循环，条件或嵌套函数中调用Hook，必须始终在React函数的顶层使用Hook。这是因为React需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用Hook，就容易导致调用顺序的不一致性。</li><li>使用useState时候，使用push，pop，splice等直接更改数组对象的坑，应该采用析构方式.</li><li>必包带来的坑,因为每次 render 都有一份新的状态，因此上述代码中的 setTimeout 使用产生了一个闭包，捕获了每次 render 后的 state，也就导致了输出了 0、1、2。如果你希望输出的内容是最新的 state 的话，可以通过 useRef 来保存 state。前文讲过 ref 在组件中只存在一份，无论何时使用它的引用都不会产生变化，因此可以来解决闭包引发的问题。<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2></li></ul><p>1、Vue如何监听数组的变化？</p><ul><li>对象数据是怎么被监听的?</li></ul><p>vue2.x版本中，数据监听用 Object.defineProperty. 通过Object.defineProperty来劫持对象属性的setter和getter操作，并创建一个监听器，当数据发生变化的时候发出通知</p><ul><li>数组数据是怎么被监听的?</li></ul><p>Vue.js是基于Object.defineProperty对对象实现“响应式化”，而对于数组，Vue.js提供的方法是重写push、pop、shift、unshift、splice、sort、reverse这七个数组方法.</p><p>如果需要用数组下标修改数组并实现响应式数据变化，Vue.js提供了$set()及$remove()方法。</p><p>1、Vue 组件 data 为什么必须是函数？</p><blockquote><p>因为组件是可以复用的,JS 里对象是引用关系,如果组件 data 是一个对象,那么子组件中的 data 属性值会互相污染。<br>所以一个组件的 data 选项必须是一个函数,因此每个实例可以维护一份被返回对象的独立的拷贝。</p></blockquote><p>2、直接给一个数组项赋值，Vue 能检测到变化吗？</p><p>由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。</p><ul><li>Vue 不能检测到以下数组的变动:</li></ul><p>1.当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 解决办法</span><br>vm.$set(vm.items, indexOfItem, newValue)<br></code></pre></div></td></tr></table></figure><p>2.当你修改数组的长度时，例如：vm.items.length = newLength</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">/ 解决办法<br>vm.items.splice(newLength)<br></code></pre></div></td></tr></table></figure><ul><li>检测不到的原因是什么？</li></ul><p>当读取 obj.title 和修改 obj.title 的时候被 defineProperty 拦截，但 defineProperty 对不存在的属性无法拦截，所以 Vue 2 中所有数据必须要在 data 里声明。</p><p>但是，Vue 不能检测到对象属性的添加或删除。因为 Vue 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue 转换它，才能让它是响应的。需要额外的 $set。</p><p>3、vue2 中响应式（双向绑定）的原理？vue3 的原理？<br>Proxy 与 Object.defineProperty 的优劣对比?<br>为什么在 Vue3.0 采用了 Proxy,抛弃了 Object.defineProperty？</p><blockquote><p>Proxy的优势如下:<br>Proxy 可以直接监听对象而非属性<br>Proxy 可以直接监听数组的变化<br>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的<br>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改<br>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利</p><p>Object.defineProperty 的优势如下:</p><p>兼容性好,支持 IE9</p></blockquote><p>4、vuex 的工作流程是怎么样？</p><blockquote><p>Vuex有5个重要的属性，分别是 State、Getter、Mutation、Action、Module，由 view 层发起一个 Action 给 Mutation，在 Mutation 中修改状态，返回新的状态，通过 Getter暴露给 view层的组件或者页面，页面监测到状态改变于是更新页面。</p></blockquote><p>4、Vue 的初始化过程（new Vue(options)）都做了什么？</p><p>处理组件配置项</p><p>初始化根组件时进行了选项合并操作，将全局配置合并到根组件的局部配置上</p><p>初始化每个子组件时做了一些性能优化，将组件配置对象上的一些深层次属性放到 vm.$options 选项中，以提高代码的执行效率</p><p>初始化组件实例的关系属性，比如 $parent、$children、$root、$refs 等</p><p>处理自定义事件</p><p>调用 beforeCreate 钩子函数</p><p>初始化组件的 inject 配置项，得到 ret[key] = val 形式的配置对象，然后对该配置对象进行响应式处理，并代理每个 key 到 vm 实例上</p><p>数据响应式，处理 props、methods、data、computed、watch 等选项</p><p>解析组件配置项上的 provide 对象，将其挂载到 vm._provided 属性上，如果 provide 是函数就用 call(vm) 方法 返回 provide 里面定义的对象</p><p>调用 created 钩子函数</p><p>如果发现配置项上有 el 选项，则自动调用 $mount 方法，也就是说有了 el 选项，就不需要再手动调用 $mount 方法，反之，没提供 el 选项则必须调用 $mount</p><p>接下来则进入挂载阶段</p><p>4、beforeCreate 期间能拿到数据吗？</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">不能，因为数据初始化阶段是在 <span class="hljs-keyword">beforeCreate </span>之后执行<br></code></pre></div></td></tr></table></figure><p>4、Vue nextTick使用场景及实现原理</p><p>它主要是处理我们再变更完数据以后，无法立刻拿到最新的DOM节点对象的问题。</p><p>vue执行完渲染后会执行this.nextTick()里面的callback函数。</p><p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。</p><p>nextTick流程总结：<br>1、将回调放到callbacks里等待执行；<br>2、将执行函数（flushCallbacks）放到微任务或宏任务里；原码里按照是否原生支持Promise.then、MutationObserver和setImmediate的顺序决策，都不支持则使用setTimeout<br>3、等到事件循环执行到微任务或者宏任务时，执行函数依次执行callbacks里的回调；</p><p>5、Vue的nextTick具体是微任务还是宏任务?</p><table><thead><tr><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td>setTimeout</td><td>process.nextTick</td></tr><tr><td>setInterval</td><td>MutationObserver</td></tr><tr><td>setImmediate</td><td>Promise.then</td></tr><tr><td>requestAnimationFrame</td><td></td></tr><tr><td>MessageChannel</td><td></td></tr></tbody></table><p>5、 Vue3 有哪些新的新特性？</p><ul><li>响应式系统</li><li>自定义渲染器</li><li>全部模块使用 TS 重构</li><li>Composition API 组合语法</li><li>新一代工程化工具 Vite</li></ul><p>6、Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？</p><p>vue2 问题：</p><ul><li><p>代码的可读性随着组件变大而变差</p></li><li><p>每一种代码复用的方式，都存在缺点</p></li><li><p>TypeScript支持有限</p></li><li><p>逻辑组织</p><ul><li>大型组件, 需要不断跳转代码块</li><li>逻辑关注点相关的代码全都放在一个函数里</li></ul></li><li><p>逻辑复用</p><ul><li>vue2 用 mixin去复用相同的逻辑, 我们一个组件混入大量不同的 mixins 的时候,命名冲突,数据来源不清</li><li>vue3 写 hook 函数</li></ul></li></ul><p>6、父组件可以监听到子组件的生命周期吗？</p><p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理。</p><p>方法一：手动通过 $emit 触发父组件的事件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Parent.vue</span><br>&lt;Child @mounted=<span class="hljs-string">&quot;doSomething&quot;</span>/&gt;<br>    <br><span class="hljs-comment">// Child.vue</span><br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;mounted&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法二：父组件引用子组件时通过 @hook 来监听</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//  Parent.vue</span><br>&lt;Child @hook:mounted=<span class="hljs-string">&quot;doSomething&quot;</span> &gt;&lt;/Child&gt;<br>    <br><span class="hljs-comment">//  Child.vue</span><br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;子组件触发 mounted 钩子函数 ...&#x27;</span>);<br>&#125;,       <br></code></pre></div></td></tr></table></figure><p>@hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</p><p>7、比较 Vue 和 React 两个框架，你觉得有哪些区别？</p><ul><li><p>监听数据变化的实现原理不同:</p><p>  Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化.<br>  react 中，数据变化后，通过新老数据的计算 Diff 来得知哪些数据发生变化。</p></li><li><p>数据流的不同:</p></li><li><p>模板渲染方式的不同:</p></li></ul><p>8、什么是异步组件？</p><p>在声明或注册组件时，Vue 接受提供 Promise 的工厂函数。然后可以在调用该组件时对其进行“解析”。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">components</span>: &#123;<br>        ‘tweet-box’: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(‘./components/<span class="hljs-keyword">async</span>/TweetBox’)<br>    &#125;<br>&#125;); <br></code></pre></div></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>1、HTTP有哪些请求方法？PUT 和 PATCH 有什么区别？</p><ul><li>GET, POST 和 HEAD方法；OPTIONS, PUT, PATCH, DELETE, TRACE 和 CONNECT</li><li>PUT和PATCH都是更新资源，而PATCH用来对资源进行局部更新。</li></ul><p>2、http 状态码 403 是什么错误？</p><ul><li>403 forbidden，表示对请求资源的访问被服务器拒绝</li></ul><p>3、知道哪些 http 的缓存策略 ？控制缓存的请求头有哪些？</p><ul><li>HTTP缓存机制分为强制缓存和协商缓存两类。</li><li>强制缓存的意思就是不要问了(不发起请求)，直接用缓存吧。</li><li>强制缓存常见技术有Expires和Cache-Control。</li><li>Expires的值是一个时间，表示这个时间前缓存都有效，都不需要发起请求。</li><li>Cache-Control有很多属性值，常用属性max-age设置了缓存有效的时间长度，单位为秒，这个时间没到，都不用发起请求。</li><li>immutable也是Cache-Control的一个属性，表示这个资源这辈子都不用再请求了，但是他兼容性不好，Cache-Control其他属性可以参考MDN的文档。</li><li>Cache-Control的max-age优先级比Expires高。</li><li>协商缓存是为了知道有没有更新，必须跟服务端沟通过才知道的。常见技术有ETag和Last-Modified。</li><li>ETag其实就是给资源算一个hash值或者版本号，对应的常用request header为If-None-Match。</li><li>Last-Modified其实就是加上资源修改的时间，对应的常用request header为If-Modified-Since，精度为秒。</li><li>ETag每次修改都会改变，而Last-Modified的精度只到秒，所以ETag更准确，优先级更高，但是需要计算，所以服务端开销更大。</li><li>强制缓存和协商缓存都存在的情况下，先判断强制缓存是否生效，如果生效，不用发起请求，直接用缓存。如果强制缓存不生效再发起请求判断协商缓存。</li></ul><blockquote><p>Cache-Control，ETag，Last-Modified</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>什 么 是 TS 泛 型 ？</li><li>webpack 构 建 流 程 是 怎 样 的 ？</li><li>webpack loade r 和 plugin 的 原 理 和 区 别 ？</li><li>webpack 热 更 新 原 理 ？</li><li>有没有读过哪些源码？</li><li>最近开发的项目具体业务是怎么样的？介绍一下？</li></ol><h2 id="Devops-相关"><a href="#Devops-相关" class="headerlink" title="Devops 相关"></a>Devops 相关</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ol><li>谈谈一下对 nginx 的理解，项目中用到 nginx 的哪些功能？</li></ol><ul><li>Nginx ，是一个 Web 服务器和反向代理服务器用于 HTTP、HTTPS、SMTP、POP3 和 IMAP 协议。</li><li>主要功能如下：<br>  正向、反向代理 2、负载均衡、分流 3、虚拟主机（绑定host）</li></ul><p>2、正向代理和反向代理区别是什么？</p><ul><li>正向代理是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定原始服务器，然后代理向原始服务器转交请求并将获得的内容返回给客户端。代理服务器和客户端处于同一个局域网内。</li><li>比如说fanqiang。我知道我要访问谷歌，于是我就告诉代理服务器让它帮我转发。</li><li>反向代理实际运行方式是代理服务器接受网络上的连接请求。它将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给网络上请求连接的客户端 。代理服务器和原始服务器处于同一个局域网内。</li><li>比如说我要访问taobao，对我来说不知道图片、json、css 是不是同一个服务器返回回来的，但是我不关心，是反向代理 处理的，我不知道原始服务器。</li></ul><p>3、nginx 如何来实现负载均衡？</p><p>负载均衡的5种策略:</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><br> 1.轮询（默认）<br> 每个请求按时间顺序逐一分配到不同的后端服务器<br><br> upstream backserver &#123;<br>    server 192.168.0.14;<br>    server 192.168.0.15;<br>&#125;<br><br>2.weight<br>指定轮询几率，weight和访问概率成正比<br><br>upstream backserver &#123;<br>    server 192.168.0.14 weight=3;<br>    server 192.168.0.15 weight=7;<br>&#125;<br><br>3.ip_hash<br>已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的.ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br><br>upstream backserver &#123;<br>    ip_hash;<br>    server 192.168.0.14:88;<br>    server 192.168.0.15:80;<br>&#125;<br><br>4.fair<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br><br>upstream backserver &#123;<br>    server server1;<br>    server server2;<br>    fair;<br>&#125;<br><br>5.url_hash<br>按访问url的<span class="hljs-built_in">hash</span>结果来分配请求，使每个url定向到同一个（对应的）后端服务器，后端服务器为缓存时比较有效。<br><br>upstream backserver &#123;<br>    server squid1:3128;<br>    server squid2:3128;<br>    <span class="hljs-built_in">hash</span> <span class="hljs-variable">$request_uri</span>;<br>    hash_method crc32;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>1、什么是 Docker？</p><ul><li>Docker是一个容器化平台，它以容器的形式将您的应用程序及其所有依赖项打包在一起，以确保您的应用程序在任何环境中无缝运行。</li></ul><p>2、Dockerfile中最常见的指令是什么？</p><ul><li>FROM：指定基础镜像；LABEL：功能是为镜像指定标签；RUN：运行指定的命令；CMD：容器启动时要运行的命令。</li></ul><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><p>1、k8s是什么？请说出你的了解？</p><ul><li>Kubernetes 是一个针对容器应用，进行自动部署，弹性伸缩和管理的开源系统。主要功能是生产环境中的容器编排。</li></ul><p>2、k8s 集群里面最小的单位是什么？</p><ul><li>pod 是最小单位。每个pod里边可以运行一个或多个container（容器）</li></ul><p>3、Service这种资源对象的作用是什么？</p><ul><li>用来给相同的多个pod对象提供一个固定的统一访问接口，常用于服务发现和服务访问。</li></ul><h3 id="openstack"><a href="#openstack" class="headerlink" title="openstack"></a>openstack</h3><p>1、openstack 里 KeyStone 组件是用于提供什么服务的？Nova 组件是做什么用？</p><ul><li>认证服务（KeyStone）<br>Nova – 用于在计算级别管理虚拟机，并在计算或管理程序级别执行其他计算任务。</li></ul><h3 id="linux-基本命令"><a href="#linux-基本命令" class="headerlink" title="linux 基本命令"></a>linux 基本命令</h3><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sudo<br>ls<br><span class="hljs-built_in">cd</span><br>mkdir<br>rm<br>apt-get<br>grep<br>cat<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code Nice 配置</title>
    <link href="/posts/1ad5be0d/"/>
    <url>/posts/1ad5be0d/</url>
    
    <content type="html"><![CDATA[<h2 id="console-log-快捷输入"><a href="#console-log-快捷输入" class="headerlink" title="console.log 快捷输入"></a>console.log 快捷输入</h2><p>打开 <code>文件 --&gt; 首选项 --&gt; 用户片段</code></p><p>在输入框中输入markdown，可以找到markdown.json的代码片段配置 放开 example 注释</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&quot;Print to console&quot;</span>: &#123;<br><span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;log&quot;</span>,<br><span class="hljs-string">&quot;body&quot;</span>: [<br><span class="hljs-string">&quot;console.log(&#x27;$1&#x27;);&quot;</span>,<br><span class="hljs-string">&quot;$2&quot;</span><br>],<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Log output to console&quot;</span><br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="markdown-代码段快捷输入"><a href="#markdown-代码段快捷输入" class="headerlink" title="markdown 代码段快捷输入"></a>markdown 代码段快捷输入</h2><p>同上 在 markdown.json 中继续配置如下</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&quot;Print to ```js&quot;</span>: &#123;<br><span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;```js&quot;</span>,<br><span class="hljs-string">&quot;body&quot;</span>: [<br><span class="hljs-string">&quot;```js&quot;</span>,<br><span class="hljs-string">&quot;$1&quot;</span>,<br><span class="hljs-string">&quot;```&quot;</span>,<br>],<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;js代码片段&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;Print to ```jsx&quot;</span>: &#123;<br><span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;```jsx&quot;</span>,<br><span class="hljs-string">&quot;body&quot;</span>: [<br><span class="hljs-string">&quot;```jsx&quot;</span>,<br><span class="hljs-string">&quot;$1&quot;</span>,<br><span class="hljs-string">&quot;```&quot;</span>,<br>],<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;jsx代码片段&quot;</span><br>&#125;,<br></code></pre></div></td></tr></table></figure><p>配置添加后，markdown 中输入 ```js 并没有快捷提示 还需要在 setting.json 中添加如下配置</p><p>setting.json 打开位置：打开vs code的设置，文件 –&gt; 首选项 –&gt; 设置 –&gt; 打开设置（在设置的右上角）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&quot;[markdown]&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;editor.quickSuggestions&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3 学习笔记</title>
    <link href="/posts/e372be48/"/>
    <url>/posts/e372be48/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-和-React-数据驱动原理对比"><a href="#Vue-和-React-数据驱动原理对比" class="headerlink" title="Vue 和 React 数据驱动原理对比"></a>Vue 和 React 数据驱动原理对比</h2><p>Vue1 解决方案是使用响应式，初始化的时候，watcher 监听数据的每个属性，数据发生变化的时候，就能够知道数据的哪个 key 变了，去修改对应的 DOM。</p><p>React 是虚拟 DOM 方案，用 JS 对象描述 DOM 树，这个对象就像数据和实际 DOM 的一个缓存层，通过管理这个对象的变化，来减少对实际 DOM 的操作。</p><p>描述实际 DOM 的虚拟 DOM 对象如下：</p><p>DOM:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>虚拟 DOM：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br>&#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>  <span class="hljs-attr">attrs</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;app&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;p&quot;</span>,<br>      <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;item&quot;</span> &#125;,<br>      <span class="hljs-attr">children</span>: [<span class="hljs-string">&quot;Item1&quot;</span>]<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>      <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;item&quot;</span> &#125;,<br>      <span class="hljs-attr">children</span>: [<span class="hljs-string">&quot;Item2&quot;</span>]<br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>数据变化的时候生成一个新的虚拟 DOM 数据，对比之前的虚拟 DOM 进行 diff 计算，算出要修改的 DOM，再对页面进行操作。</p><p>通知页面更新的方式不同：</p><ul><li>vue 中，数据变化，框架主动告诉你修改了哪些数据；</li><li>react 中，变化变化后，通过新老数据的计算 Diff 来得知哪些数据发生变化</li></ul><p>性能问题：</p><ul><li>vue 的响应式，在项目大了之后，每个数据都有一个 watcher 会影响性能</li><li>如果 react 虚拟 dom 过于庞大，使得 diff 计算时间大于 16.6 ms(屏幕刷新率 60HZ, 1/60)，可能造成性能卡顿。</li></ul><p>为了解决性能问题， Vue 和 react 走了不同的道路。</p><ul><li>react 借鉴操作系统时间分片概念，引入 Fiber 架构。把整个虚拟 DOM 树 微观化，变成链表，然后利用浏览器的空闲时间计算 diff。</li><li>vue1 的问题在于响应式数据过多，会带来内存占用过多的问题。vue2 引入虚拟 DOM 来解决响应式数据过多问题。</li></ul><p>响应式数据是主动推送变化，虚拟 DOM 是被动计算数据的 diff。vue2 将两者结合在一起，在组件级别来划分。</p><p>组件间的变化，通过响应式来通知更新。组件内部的数据变化，通过虚拟 DOM 去更新页面。最终，把响应式监听器控制在组件级别，而虚拟 DOM 的量级控制在组件的大小。</p><p>在模板书写上，vue 和 react 分别走了 template 和 jsx 两个路线。</p><ul><li>react 世界只有 jsx，最终 jsx 都会在 Compiler 那层，即工程化那里编译成 js 来执行。</li><li>vue 默认 template。vue3 优秀的其中一点是在虚拟 DOM 的静态标记上做到了极致，让静态的部分越过虚拟 DOM 的计算，真正做到按需更新，很好的提高了性能。</li></ul><h2 id="Vue3-的新特性"><a href="#Vue3-的新特性" class="headerlink" title="Vue3 的新特性"></a>Vue3 的新特性</h2><h3 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h3><p>Vue 2 的响应式机制是基于 Object.defineProperty() 这个 API 实现的.Vue3 是基于 proxy。两者区别是 defineProperty 是拦截具体某个属性， Proxy 是全部拦截，是代理。</p><p>defineProperty 示例如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&quot;title&quot;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>当读取 obj.title 和修改 obj.title 的时候被 defineProperty 拦截，但 defineProperty 对不存在的属性无法拦截，所以 Vue 2 中所有数据必须要在 data 里声明。</p><p>但是，Vue 不能检测到对象属性的添加或删除。因为 Vue 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue 转换它，才能让它是响应的。需要额外的 $set。</p><p>Proxy API 是真正的代理，示例如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>Proxy 拦截 obj 这个数据，不关心 obj 里面属性，统一拦截。</p><h3 id="自定义渲染器"><a href="#自定义渲染器" class="headerlink" title="自定义渲染器"></a>自定义渲染器</h3><p>vue2 内部所有模块是揉在一起，导致不好扩展。vue3 采用 monorepo 方式进行拆包，响应式、编译和运行时全部独立。独立出来的响应式，甚至可以在 react、node 中使用。</p><p><img src="/img/2022-01-24-1.png" alt="vue 架构"></p><p>渲染逻辑拆成 <strong>平台无关渲染逻辑</strong> 和 <strong>浏览器渲染 API</strong>。</p><h3 id="全部模块使用-TS-重构"><a href="#全部模块使用-TS-重构" class="headerlink" title="全部模块使用 TS 重构"></a>全部模块使用 TS 重构</h3><p>Vue2 使用 Flow.js 做类型检测；Flow.js 已被抛弃，vue3 选择 TS。</p><h3 id="Composition-API-组合语法"><a href="#Composition-API-组合语法" class="headerlink" title="Composition API 组合语法"></a>Composition API 组合语法</h3><p>vue2 中示例：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> App = &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.count++;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">double</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count * <span class="hljs-number">2</span>;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>vue2 中 Options API 存在以下问题：</p><ul><li>所有数据都挂载在 this 上，Options API 写法对 TS 类型推导不友好。</li><li>新增的功能基本都要修改 data、method 等，代码行数多了以后，会经常需要上下反复横跳。</li><li>代码不好复用，vue2 的组件很难抽离通用逻辑，只能使用 mixin，还会导致命名冲突问题。</li></ul><p>vue3 中采用新增的 setup 写法：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; reactive, computed &#125; = Vue;<br><span class="hljs-keyword">let</span> App = &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> state = reactive(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>      state.count++;<br>    &#125;<br>    <span class="hljs-keyword">const</span> double = computed(<span class="hljs-function">() =&gt;</span> state.count * <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> &#123; state, add, double &#125;;<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>Composition API 好处如下：</p><ul><li>所有 API 都是 import 引入。对 Tree-shaking 很友好，没用到功能，打包的时候会被清理掉 ，减小包的大小</li><li>一个功能模块的 methods、data 放一起书写，避免上下反复横跳。</li><li>代码复用方便，一个功能的所有 methods、data 封装在一个独立的函数里。</li><li>Composotion API 新增的 return 等语句，在实际项目中使用。</li></ul><p><img src="/img/2022-01-24-2.png" alt="Composition API"></p><h3 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h3><p>Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件。</p><ul><li>Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li><li>Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。</li><li>Suspense: 异步组件，更方便开发有异步请求的组件。</li></ul><h3 id="新一代工程化工具-Vite"><a href="#新一代工程化工具-Vite" class="headerlink" title="新一代工程化工具 Vite"></a>新一代工程化工具 Vite</h3><p>webpack 工程化的原理是 根据 import 依赖逻辑形成一个依赖图，然后调用对应的处理工具，把整个项目打包后，放在内存中再启动调试。因为要预打包，复杂项目开发时，启动开发环境和热更新时间都比较长，Vite 就是为了解决这个问题而出现的。</p><p>现代浏览器已经默认支持 ES6 的 import 语法，Vite 就是基于这个原理实现的。</p><p>在开发环境下，不需要全部预打包，只要把首页依赖的文件，依次通过网络请求去获取，开发体验得到巨大提升，做到复杂项目时，也能做到秒级调试和热更新。</p><p>webpack 工作原理如下，需要把所有路由依赖打包后，才能开始调试。</p><p><img src="/img/2022-01-24-3.png" alt="webpack 工作原理"></p><p>Vite 工作原理，根据首页的依赖模块，再去获取路由 1 的模块，按需加载。</p><p><img src="/img/2022-01-24-4.png" alt="Vite 工作原理"></p><h2 id="Vue3-响应式机制"><a href="#Vue3-响应式机制" class="headerlink" title="Vue3 响应式机制"></a>Vue3 响应式机制</h2><p>响应式原理：Vue 中用过三种响应式解决方案，分别是 defineProperty、Proxy 和 value setter。</p><hr><p>todo: 07</p><h2 id="Vue3-实践常见问题汇总"><a href="#Vue3-实践常见问题汇总" class="headerlink" title="Vue3 实践常见问题汇总"></a>Vue3 实践常见问题汇总</h2><ol><li><p>vetur 报错， xx has no export.</p><p>使用 Vue3 <code>script setup</code> 语法糖时,VsCode 插件 Vetur 会报该错误，原因是 Vetur(v0.35.0) 暂不支持 ts。</p><p>解决办法： 卸载 Vetur， 用 Volar(尤大推荐) 以取代 Vetur。</p></li></ol><hr><p>上述笔记源于学习极客时间-大圣的 <a href="http://gk.link/a/115Qp">玩转 Vue3 全家桶</a> 课程笔记整理。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map 到底改不改变原数组</title>
    <link href="/posts/d177e434/"/>
    <url>/posts/d177e434/</url>
    
    <content type="html"><![CDATA[<p>一般认为 map 不会对原数组进行修改，但事实并不是如此。</p><h2 id="数组内为基础类型数据时-原数组不变"><a href="#数组内为基础类型数据时-原数组不变" class="headerlink" title="数组内为基础类型数据时,原数组不变"></a>数组内为基础类型数据时,原数组不变</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [1,2,3,4,5]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[2, 4, 6, 8, 10]</span><br></code></pre></div></td></tr></table></figure><h2 id="数据内是引用类型数据时，注意写法"><a href="#数据内是引用类型数据时，注意写法" class="headerlink" title="数据内是引用类型数据时，注意写法"></a>数据内是引用类型数据时，注意写法</h2><ol><li><p>item 上直接修改，改变原数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;James&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;<br>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  item.like = <span class="hljs-string">&quot;eat&quot;</span>;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br></code></pre></div></td></tr></table></figure></li><li><p>开辟新的引用地址, 不改变原数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;James&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;<br>];<br><span class="hljs-keyword">let</span> newArray = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> obj = &#123; ...item, <span class="hljs-attr">like</span>: <span class="hljs-string">&quot;eat&quot;</span> &#125;;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// [&#123; name: &#x27;Anna&#x27;, age: 16&#125;,&#123; name: &#x27;James&#x27;, age: 18&#125;]</span><br><span class="hljs-built_in">console</span>.log(newArray); <span class="hljs-comment">//[&#123; name: &#x27;Anna&#x27;, age: 16,like: &quot;eat&quot;&#125;,&#123; name: &#x27;James&#x27;, age: 18,like: &quot;eat&quot;&#125;]</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在 class 组件中使用 hooks</title>
    <link href="/posts/ee7a9294/"/>
    <url>/posts/ee7a9294/</url>
    
    <content type="html"><![CDATA[<p>解决办法</p><p>以一个简单的 <code>useScreenWidthhook</code> 函数为例，它的目的是获取全屏的宽度，并且去监听浏览器窗口的变化，更新宽度：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useScreenWidth</span>(<span class="hljs-params"></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> [width, setWidth] = useState(<span class="hljs-built_in">window</span>.innerWidth);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-function">(<span class="hljs-params">event: any</span>) =&gt;</span> &#123;<br>      setWidth(event.target.innerWidth);<br>    &#125;;<br>    <span class="hljs-comment">// 监听浏览器窗口变化</span><br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>, handler);<br>    <span class="hljs-comment">// 组件unmount时要解除监听</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&quot;resize&quot;</span>, handler);<br>    &#125;;<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> width;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="方法-1：将-Hook-包装成-HOC"><a href="#方法-1：将-Hook-包装成-HOC" class="headerlink" title="方法 1：将 Hook 包装成 HOC"></a>方法 1：将 Hook 包装成 HOC</h2><p>HOC 是 React 中复用组件的高级用法，它的本质是一个函数，它的输入参数是一个组件，返回相同的组件以及一些额外的 props。在我们的例子里，可以让 hook 函数作为 props 传递到目标组件中:</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../hooks/useScreenWidth&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> withHooksHOC = <span class="hljs-function">(<span class="hljs-params">Component: any</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">props: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> screenWidth = useScreenWidth();<br><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;screenWidth&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>;<br>  &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>将我们的目标组件用上述的 withHooksHOC 包装起来</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; withHooksHOC &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./withHooksHOC&quot;</span>;<br><br>interface IHooksHOCProps &#123;<br>  <span class="hljs-attr">width</span>: number;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HooksHOC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">IHooksHOCProps</span>&gt; </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>width: &#123;this.props.width&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withHooksHOC(HooksHOC);<br></code></pre></div></td></tr></table></figure><h2 id="方法-2：将-Hook-包装成函数组件"><a href="#方法-2：将-Hook-包装成函数组件" class="headerlink" title="方法 2：将 Hook 包装成函数组件"></a>方法 2：将 Hook 包装成函数组件</h2><p>将 hook 变成函数组件，它接收一个参数为 width 的 children 函数，然后将 width 作为 render prop 传递：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; FunctionComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../hooks/useScreenWidth&quot;</span>;<br><br>type ScreenWidthChildren = <span class="hljs-function">(<span class="hljs-params">screenWidth: number</span>) =&gt;</span> React.ReactNode;<br><br>interface IScreenWidthProps &#123;<br>  <span class="hljs-attr">children</span>: ScreenWidthChildren;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ScreenWidth: FunctionComponent&lt;IScreenWidthProps&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; children &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> screenWidth: number = useScreenWidth();<br><br>  <span class="hljs-keyword">return</span> children(screenWidth);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>使用：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ScreenWidth &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./ScreenWidth&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HooksRenderProps</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScreenWidth</span>&gt;</span>&#123;(width) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span> &quot;<span class="hljs-attr">48px</span>&quot; &#125;&#125;&gt;</span>width: &#123;width&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ScreenWidth</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HooK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useState 引用类型数据更新不触发重新渲染问题</title>
    <link href="/posts/b195fb80/"/>
    <url>/posts/b195fb80/</url>
    
    <content type="html"><![CDATA[<h2 id="useState-函数式更新"><a href="#useState-函数式更新" class="headerlink" title="useState 函数式更新"></a>useState 函数式更新</h2><p>与 class 组件中的 setState 方法不同，useState 不会自动合并更新对象。你可以用函数式的 setState 结合展开运算符来达到合并更新对象的效果。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, setState] = useState(&#123;&#125;);<br>setState(<span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 也可以使用 Object.assign</span><br>  <span class="hljs-keyword">return</span> &#123; ...prevState, ...updatedValues &#125;;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="引用类型-state-更新"><a href="#引用类型-state-更新" class="headerlink" title="引用类型 state 更新"></a>引用类型 state 更新</h2><p>经常 state 数据不是简单数据类型(值类型)，而是数组、对象之类(引用类型).而 React 组件的更新机制对 state 只进行浅对比，也就是更新某个复杂类型数据时只要它的引用地址没变，那就不会重新渲染组件。</p><p>尤其当被更新的引用类型数据需要依赖之前的数据时，容易踩坑,不触发更新。更新复杂 state 的时候必须传给它一个全新的对象，而不是复制了它引用地址再修改的对象。</p><p>两种解决办法：</p><ol><li><p>结合展开运算符返回一个新对象</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextValue</span>(<span class="hljs-params">preValue</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ipValue = <span class="hljs-built_in">Number</span>.parseInt(newVal, <span class="hljs-number">10</span>);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.isNaN(ipValue)) &#123;<br>    ipValue = <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &lt; <span class="hljs-number">0</span>) &#123;<br>    ipValue = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &gt; <span class="hljs-number">255</span>) &#123;<br>    ipValue = <span class="hljs-number">255</span>;<br>  &#125;<br>  preValue[index] = ipValue; <span class="hljs-comment">//这里数据引用地址的值同样被修改</span><br>  <span class="hljs-keyword">return</span> [...preValue]; <span class="hljs-comment">// 数据最外层的引用地址不同即可触发组件更新</span><br>&#125;<br><br>setValue(<span class="hljs-function">(<span class="hljs-params">preValue</span>) =&gt;</span> nextValue(preValue));<br></code></pre></div></td></tr></table></figure></li><li><p>深拷贝对象，用全新的副本更新数据。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextValue</span>(<span class="hljs-params">preValue</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> newValue = _.cloneDeep(preValue);<br>  <span class="hljs-keyword">let</span> ipValue = <span class="hljs-built_in">Number</span>.parseInt(newVal, <span class="hljs-number">10</span>);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.isNaN(ipValue)) &#123;<br>    ipValue = <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &lt; <span class="hljs-number">0</span>) &#123;<br>    ipValue = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ipValue &gt; <span class="hljs-number">255</span>) &#123;<br>    ipValue = <span class="hljs-number">255</span>;<br>  &#125;<br>  newValue[index] = ipValue; <span class="hljs-comment">//这里数据引用地址的值同样被修改</span><br>  <span class="hljs-keyword">return</span> newValue; <span class="hljs-comment">// 数据最外层的引用地址不同即可触发组件更新</span><br>&#125;<br><br>setValue(<span class="hljs-function">(<span class="hljs-params">preValue</span>) =&gt;</span> nextValue(preValue));<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HooK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 useRef 跨生命周期保存变量</title>
    <link href="/posts/bb88c12/"/>
    <url>/posts/bb88c12/</url>
    
    <content type="html"><![CDATA[<p>ref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.</p><p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p><h2 id="场景-1：只在更新时运行-useEffect"><a href="#场景-1：只在更新时运行-useEffect" class="headerlink" title="场景 1：只在更新时运行 useEffect"></a>场景 1：只在更新时运行 useEffect</h2><p>使用一个可变的 ref 手动存储一个布尔值来表示是首次渲染还是后续渲染.</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> prevCountRef = useRef(<span class="hljs-literal">false</span>);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (prevCountRef.current) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;只在更新时候执行&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;首次渲染执行&quot;</span>);<br>      prevCountRef.current = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>抽成自定义 hook：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> update = useUpdate();<br>  <span class="hljs-built_in">console</span>.log(update, <span class="hljs-string">&quot;是否更新&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useUpdate</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ref = useRef(<span class="hljs-literal">false</span>);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.current = <span class="hljs-literal">true</span>;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="场景-2：获取上一轮的-props-或-state"><a href="#场景-2：获取上一轮的-props-或-state" class="headerlink" title="场景 2：获取上一轮的 props 或 state"></a>场景 2：获取上一轮的 props 或 state</h2><p>为什么 ref.current 拿到是上次的值？原因：</p><ol><li>useEffect 很重要的一点是：它是在每次渲染之后才会触发的，是延迟执行的。</li><li>return 语句是同步的，所以 return 的时候，ref.current 还是旧值。</li><li>以下代码的执行顺序是 1 3 2</li></ol><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> prevCountRef = useRef();<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1&quot;</span>, count);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;2.&quot;</span>, count);<br>    prevCountRef.current = count;<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> prevCount = prevCountRef.current;<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`3.之前的状态: <span class="hljs-subst">$&#123;prevCount&#125;</span>;现在状态: <span class="hljs-subst">$&#123;count&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">          setCount(count + 1);</span><br><span class="xml">        &#125;&#125;</span><br><span class="xml">      &gt;</span><br><span class="xml">        +</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>抽取成自定义 Hook:</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">usePrevious</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ref = useRef();<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    ref.current = value;<br>  &#125;, [value]);<br><br>  <span class="hljs-keyword">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="场景-3：解决-hooks-时，由于异步闭包无法获取最新-state-的问题"><a href="#场景-3：解决-hooks-时，由于异步闭包无法获取最新-state-的问题" class="headerlink" title="场景 3：解决 hooks 时，由于异步闭包无法获取最新 state 的问题"></a>场景 3：解决 hooks 时，由于异步闭包无法获取最新 state 的问题</h2><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> RefComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 使用 useState 存放和改变展示的 number</span><br>  <span class="hljs-keyword">const</span> [number, setNumber] = useState(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 使用 useRef 生成一个独立的 ref 对象</span><br>  <span class="hljs-comment">// 在它的 current 属性单独存放一个展示的 number, 初始值为 0</span><br>  <span class="hljs-keyword">const</span> numRef = useRef(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incrementAndDelayLogging</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 点击按钮 number + 1</span><br>    setNumber(number + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 同时 ref 对象的 current 属性值也 + 1</span><br>    numRef.current++;<br>    <span class="hljs-comment">// 定时器函数中产生了闭包, 这里 number 的是组件更新前的 number 对象, 所以值一直会滞后 1</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> alert(<span class="hljs-string">`state: <span class="hljs-subst">$&#123;number&#125;</span> | ref: <span class="hljs-subst">$&#123;numRef.current&#125;</span>`</span>), <span class="hljs-number">1000</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 直接渲染的组件是正常情况, 可以获取到最新的 state,</span><br>  <span class="hljs-comment">// 所以 ref.current 和 state 存储的值显示一致</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>solving closure by useRef<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;incrementAndDelayLogging&#125;</span>&gt;</span>alert in setTimeout<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>state: &#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>ref: &#123;numRef.current&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HooK</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FE-Interview</title>
    <link href="/posts/12d2438b/"/>
    <url>/posts/12d2438b/</url>
    
    <content type="html"><![CDATA[<hr><p>第 1 天（2022.2.28）</p><h2 id="1-什么时候使用状态管理器？"><a href="#1-什么时候使用状态管理器？" class="headerlink" title="1. 什么时候使用状态管理器？"></a>1. 什么时候使用状态管理器？</h2><ol><li>组件状态要在多个组件共享时</li><li>某个组件状态需要在任何地方可以拿到</li><li>一个组件需要改变全局状态时</li><li>一个组件需要改变另一个组件状态时</li><li>组件状态提升提升不能满足需求时，层级过多时。</li></ol><h2 id="2-render-函数中-return-如果没有使用-会有什么问题？"><a href="#2-render-函数中-return-如果没有使用-会有什么问题？" class="headerlink" title="2. render 函数中 return 如果没有使用()会有什么问题？"></a>2. render 函数中 return 如果没有使用()会有什么问题？</h2><p>避免遇到自动插入分号陷阱。</p><p>我们在使用 JSX 语法书写 react 代码时，babel 会将 JSX 语法编译成 js，同时会在每行自动添加分号（；），如果 return 后换行了，那么就会变成 return； 一般情况下会报错：</p><p>Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.<br>上面这段英文翻译成中文：</p><p>渲染没有返回任何内容。这通常意味着缺少 return 语句。或者，为了不渲染，返回 null。<br>为了代码可读性我们一般会在 return 后面添加括号这样代码可以折行书写，否则就在 return 后面紧跟着语句，这样也是可以的。</p><p>举两个正确的书写例子：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Nav = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;c_navbar&quot;</span>&gt;</span></span><br><span class="xml">      &#123; some jsx magic here &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>    )<br>  &#125;<br><br><span class="hljs-keyword">const</span> Nav = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;c_navbar&quot;</span>&gt;</span></span><br><span class="xml">    &#123; some jsx magic here &#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>错误的写法：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Nav = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;c_navbar&quot;</span>&gt;</span></span><br><span class="xml">      &#123; some jsx magic here &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-componentWillUpdate-可以直接修改-state-的值吗？"><a href="#3-componentWillUpdate-可以直接修改-state-的值吗？" class="headerlink" title="3. componentWillUpdate 可以直接修改 state 的值吗？"></a>3. componentWillUpdate 可以直接修改 state 的值吗？</h2><p>直接修改不可以，但是加上条件就可以。</p><p>文档原文：“你也可以在 componentDidUpdate() 中直接调用 setState()，但请注意它必须被包裹在一个条件语句里，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。”</p><p>componentWillReceiveProps 同理</p><h2 id="4-说说你对-React-的渲染原理的理解"><a href="#4-说说你对-React-的渲染原理的理解" class="headerlink" title="4. 说说你对 React 的渲染原理的理解"></a>4. 说说你对 React 的渲染原理的理解</h2><ol><li>React 会调用 React.render()构建一颗 DOM 树，生成虚拟 dom。</li><li>通过改变 state 或 props 触发更新。</li><li>对比新旧虚拟 dom，diff 算法，深度优先，将实际需要改变的反应到真实 dom。</li></ol><hr><p>第 2 天（2022.3.1）</p><h2 id="5-什么渲染劫持？"><a href="#5-什么渲染劫持？" class="headerlink" title="5. 什么渲染劫持？"></a>5. 什么渲染劫持？</h2><p>一般和高阶组件（HOC）一起解释。</p><p>高阶组件在 render 的时候可以做其他操作，从而控制原组件的渲染输出，这种改变原组件渲染的方式称为 渲染劫持。</p><p>在高阶组件中，组合渲染和条件渲染都是渲染劫持的一种，通过反向继承，不仅可实现渲染劫持，还可以增强原组件 render 函数。</p><p>除了 HOC，当新写一个组件，继承自一个已有的组件，可以随便修改 render 函数，使用 state、props 等改变原组件的渲染，都叫渲染劫持。</p><p>PS: HOC 反向继承</p><p>TODO：</p><h2 id="6-React-Intl是什么原理？"><a href="#6-React-Intl是什么原理？" class="headerlink" title="6. React Intl是什么原理？"></a>6. React Intl是什么原理？</h2><p>React Intl 用途是国际化库，提供组件、日期等国际化方法。</p><p>做国际化就类似于字体文件，通过切换语言，加载不同语言包到本地.</p><p>最外层包一个Provider。调用库中方法，完成国际化。</p><p>前端国际化核心步骤有两步：</p><ul><li>创建资源文件，以 key-value 方式存储</li><li>加载资源文件，将页面上 key 的内容替换为相关 value</li></ul><h2 id="7-怎么实现React组件的国际化呢？"><a href="#7-怎么实现React组件的国际化呢？" class="headerlink" title="7. 怎么实现React组件的国际化呢？"></a>7. 怎么实现React组件的国际化呢？</h2><p> 使用 i18next 以及 react-i18next 配合 i18next-scanner，通过 grunt 跑 task 自动扫描生成 json 文件。</p><p> 现在大厂比较常用的方案是，使用AST，每次开发完新版本，通过AST去扫描所有的代码，找出代码中的中文，以中文为key，调用智能翻译服务，去帮项目自动生成json文件。这样，再也不需要人为去维护json文件，一切都依赖工具进行自动化。</p><hr><p>第 3 天（2022.3.2）</p><h2 id="8-说说Context有哪些属性？"><a href="#8-说说Context有哪些属性？" class="headerlink" title="8. 说说Context有哪些属性？"></a>8. 说说Context有哪些属性？</h2><p>context属于一种解决组件间层级过多传递数据的问题，避免了层层嵌套的通过props传递的形式，同时对于不需要使用到redux时，是一种解决方案。</p><p>Context.Provider：生产者，数据提供方；通过value属性来定义需要被传递的数据<br>Context.Consumer：消费者，数据获取方；根据是函数组件还是class组件，有不同的使用形式；class组件可以指定contextType来确定要使用哪一个context对象的值，函数组件需要使用回调函数的形式来获取context的值；需要显示的指定context对象；</p><h2 id="9-怎么使用Context开发组件？"><a href="#9-怎么使用Context开发组件？" class="headerlink" title="9. 怎么使用Context开发组件？"></a>9. 怎么使用Context开发组件？</h2><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> themes = &#123;<br>  <span class="hljs-attr">light</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;#eeeeee&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">dark</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&quot;#ffffff&quot;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;#222222&quot;</span><br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 首先创建一个 context 对象这里命名为：ThemeContext</span><br><span class="hljs-keyword">const</span> ThemeContext = React.createContext(themes.light);<br><br><span class="hljs-comment">// 创建一个祖先组件组件 内部使用Provier 这个对象创建一个组件 其中 value 属性是真实传递的属性</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;themes.dark&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Toolbar</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 渲染 button 组件的外层包裹的属性</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Toolbar</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ThemedButton</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 在 Toolbar 中渲染的button 组件 使用 useContext，将 value 值跨组件传递给 // ThemeButton 组件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ThemedButton</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> theme = useContext(ThemeContext);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">theme.background</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.foreground</span> &#125;&#125;&gt;</span></span><br><span class="xml">      I am styled by theme context!</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="10-为什么React并不推荐我们优先考虑使用Context？"><a href="#10-为什么React并不推荐我们优先考虑使用Context？" class="headerlink" title="10. 为什么React并不推荐我们优先考虑使用Context？"></a>10. 为什么React并不推荐我们优先考虑使用Context？</h2><p>1、Context目前还处于实验阶段，可能会在后面的发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来大的影响和麻烦，不建议在app中使用context。<br>2、尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context<br>3、对于组件之间的数据通信或者状态管理，有效使用props或者state解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳的方案的时候，在考虑context。<br>4、context的更新需要通过setState()触发，但是这并不是很可靠的，Context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如 shouldComponentUpdate() 返回false 那么不能保证Context的更新一定可以使用Context的子组件，因此，Context的可靠性需要关注。</p><hr><p>第 4 天（2022.3.3）</p><h2 id="11-childContextTypes是什么？它有什么用？"><a href="#11-childContextTypes是什么？它有什么用？" class="headerlink" title="11. childContextTypes是什么？它有什么用？"></a>11. childContextTypes是什么？它有什么用？</h2><p>childContextTypes用来定义context数据类型，该api从16.3开始已被废弃</p><p>使用方式</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">getChildContext</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">color</span>: <span class="hljs-string">&quot;purple&quot;</span>&#125;;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>MessageList<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br>MessageList.childContextTypes = &#123;<br>  <span class="hljs-attr">color</span>: PropTypes.string<br>&#125;;<br><br></code></pre></div></td></tr></table></figure><h2 id="12-Consumer向上找不到Provider的时候怎么办？"><a href="#12-Consumer向上找不到Provider的时候怎么办？" class="headerlink" title="12. Consumer向上找不到Provider的时候怎么办？"></a>12. Consumer向上找不到Provider的时候怎么办？</h2><p>当consumer向上层找不到provider时，此时就会取创建context时传给createContext的那个值，也就是当前context对象的默认值，在定义provider时的value中的值不是默认值，而是表示需要被传递的值.</p><hr><p>第 5 天（2022.3.4）</p><h2 id="13-说说你对windowing的了解"><a href="#13-说说你对windowing的了解" class="headerlink" title="13. 说说你对windowing的了解"></a>13. 说说你对windowing的了解</h2><p>展示长列表<br>如果你的应用会渲染大量的列表数据，我们建议使用一种称为‘windowing’的技术，这种技术下在任何给定的时间内只会渲染一小部分数据列表，并可以减少列表项的重复渲染（即再次渲染已经渲染过的数据）。</p><p>react-window和react-virtualized都是流行的使用windowing技术的库，他们都提供了一系列可重用的组件，这些组件能够帮助你以最好的性能展示列表以及表格数据</p><h2 id="14-举例说明React的-portal-有哪些运用场景？"><a href="#14-举例说明React的-portal-有哪些运用场景？" class="headerlink" title="14. 举例说明React的 portal 有哪些运用场景？"></a>14. 举例说明React的 portal 有哪些运用场景？</h2><p>portal可以将内容插入到除了父节点的dom之外的地方去渲染，所以modal是一个通过portal实现的典型例子；并且对于事件绑定，因为使用了事件冒泡，所以并不用担心被渲染到父组件结构之外的内容，不能去监听事件</p><h2 id="15-你有用过React的插槽-Portals-吗？怎么用？"><a href="#15-你有用过React的插槽-Portals-吗？怎么用？" class="headerlink" title="15. 你有用过React的插槽(Portals)吗？怎么用？"></a>15. 你有用过React的插槽(Portals)吗？怎么用？</h2><p>1、首先简单的介绍下react中的插槽（Portals），通过ReactDOM.createPortal(child, container)创建，是ReactDOM提供的接口，可以实现将子节点渲染到父组件DOM层次结构之外的DOM节点。<br>2、第一个参数（child）是任何可渲染的 React 子元素，例如一个元素，字符串或 片段(fragment)。第二个参数（container）则是一个 DOM 元素。<br>3、对于 portal 的一个典型用例是当父组件有 overflow: hidden 或 z-index 样式，但你需要子组件能够在视觉上 “跳出(break out)” 其容器。例如，对话框、hovercards以及提示框。所以一般react组件里的模态框，就是这样实现的。</p><p>如果一个子组件的真实DOM结构必须渲染到当前组件外，但又想保留这两者的父子关系，就可以用Protals。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Modal = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> modal = <span class="hljs-built_in">document</span>.body.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>  <span class="hljs-built_in">document</span>.appendChild(modal);<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">document</span>.body.removeChild(modal);<br>    &#125;<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> React.createPortal(<span class="hljs-built_in">this</span>.props.children, modal);<br>&#125;<br><span class="hljs-keyword">const</span> Parent = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [sum, setSum] = useState(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> add = <span class="hljs-function">() =&gt;</span> setSum(sum + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;add&#125;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Modal</span>&gt;</span>加一<span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>第 6 天（2022.3.5）</p><h2 id="16-React的严格模式有什么用处？"><a href="#16-React的严格模式有什么用处？" class="headerlink" title="16. React的严格模式有什么用处？"></a>16. React的严格模式有什么用处？</h2><p>StrictMode 目前有助于：</p><ul><li>识别不安全的生命周期</li><li>关于使用过时字符串 ref API 的警告</li><li>关于使用废弃的 findDOMNode 方法的警告</li><li>检测意外的副作用</li><li>检测过时的 context API</li></ul><p>可以为程序的任何部分使用严格模式</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ExampleApplication</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ComponentOne</span> /&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ComponentTwo</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-comment">// 不会对 Header 和 Footer 组件运行严格模式检查。但是，ComponentOne 和 ComponentTwo 以及它们的所有后代元素都将进行检查。</span><br></code></pre></div></td></tr></table></figure><h2 id="17-React如何进行代码拆分？拆分的原则是什么？"><a href="#17-React如何进行代码拆分？拆分的原则是什么？" class="headerlink" title="17. React如何进行代码拆分？拆分的原则是什么？"></a>17. React如何进行代码拆分？拆分的原则是什么？</h2><p>react的拆分前提是代码目录设计规范，模块定义规范，代码设计规范，符合程序设计的一般原则，例如高内聚、低耦合等等。</p><p>在我们的react项目中：<br>1、在 api 层面我们单独封装，对外暴露http请求的结果。<br>2、数据层我们使用的react-redux 异步中间件使用的是redux-thunk 分装处理异步请求，合业务逻辑处理。<br>3、视图层，尽量使用 redux 层面的传递过来的数据，修改逻辑 也是重新触发action 更改props。<br>4、静态类型的资源单独放置<br>5、公共组件、高阶组件、插件单独放置<br>6、工具类文件单独放置</p><h2 id="18-React组件的构造函数有什么作用？"><a href="#18-React组件的构造函数有什么作用？" class="headerlink" title="18. React组件的构造函数有什么作用？"></a>18. React组件的构造函数有什么作用？</h2><p>官网中，构造函数仅用于以下两种情况：</p><ul><li>通过给 this.state 赋值对象来初始化内部 state。</li><li>为事件处理函数绑定实例</li></ul><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>  <span class="hljs-built_in">super</span>(props);<br>  <span class="hljs-comment">// 不要在这里调用 this.setState()</span><br>  <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span> &#125;;<br>  <span class="hljs-built_in">this</span>.handleClick = <span class="hljs-built_in">this</span>.handleClick.bind(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>避免将 props 的值复制给 state！这是一个常见的错误：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br> <span class="hljs-built_in">super</span>(props);<br> <span class="hljs-comment">// 不要这样做</span><br> <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">color</span>: props.color &#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如此做毫无必要（你可以直接使用 this.props.color），同时还产生了 bug（更新 prop 中的 color 时，并不会影响 state）。</p><h2 id="19-React组件的构造函数是必须的吗？"><a href="#19-React组件的构造函数是必须的吗？" class="headerlink" title="19. React组件的构造函数是必须的吗？"></a>19. React组件的构造函数是必须的吗？</h2><p>function组件不用考虑构造函数；<br>对于class组件，如果不写构造函数，默认会被隐式调用.</p><p>对于无状态组件，内部没有维护自己的state，只接收外部传入的props 是不需要声明构造函数的.</p><hr><p>第 7 天（2022.3.6）</p><h2 id="20-React中在哪捕获错误？"><a href="#20-React中在哪捕获错误？" class="headerlink" title="20. React中在哪捕获错误？"></a>20. React中在哪捕获错误？</h2><p>可以使用错误边界组件来捕获异常；这样可以使用替代ui来代替错误位置的渲染；而不是让程序崩溃；<br>主要来捕获生命周期异常，渲染中的异常</p><p>使用 static getDerivedStateFromError() 渲染备用 UI ，使用 componentDidCatch() 打印错误信息</p><p>定义错误边界当做常规组件包裹ui组件, 官网例子：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorBoundary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span> &#125;;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>    <span class="hljs-comment">// 更新 state 使下一次渲染能够显示降级后的 UI</span><br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span> &#125;;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentDidCatch</span>(<span class="hljs-params">error, errorInfo</span>)</span> &#123;<br>    <span class="hljs-comment">// 你同样可以将错误日志上报给服务器</span><br>    logErrorToMyService(error, errorInfo);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.state.hasError) &#123;<br>      <span class="hljs-comment">// 你可以自定义降级后的 UI 并渲染</span><br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Something went wrong.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.props.children; <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">&lt;ErrorBoundary&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyWidget</span> /&gt;</span></span><br>&lt;/ErrorBoundary&gt;<br></code></pre></div></td></tr></table></figure><p>但是错误边界不会捕获 :</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">try</span>&#123;&#125;<span class="hljs-keyword">catch</span>(err)&#123;&#125;<br><span class="hljs-comment">///异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数）</span><br><span class="hljs-comment">///服务端渲染</span><br><span class="hljs-comment">///它自身抛出来的错误（并非它的子组件)</span><br></code></pre></div></td></tr></table></figure><h2 id="21-React怎样引入svg的文件？"><a href="#21-React怎样引入svg的文件？" class="headerlink" title="21. React怎样引入svg的文件？"></a>21. React怎样引入svg的文件？</h2><p>方法1： 这种写法会由webpack转为url方式引入。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// svg png等类型图片</span><br><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.svg&#x27;</span>;<br><span class="hljs-comment">//...</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-logo&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="hljs-comment">//...</span><br></code></pre></div></td></tr></table></figure><p>方法2： 这种方式仅对SVG图片生效，将svg看作组件导入：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">import</span> &#123; ReactComponent <span class="hljs-keyword">as</span> Logo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.svg&#x27;</span><br><span class="hljs-comment">// ...</span><br>&lt;Logo /&gt;<br></code></pre></div></td></tr></table></figure><h2 id="22-在React中你有经常使用常量吗？"><a href="#22-在React中你有经常使用常量吗？" class="headerlink" title="22. 在React中你有经常使用常量吗？"></a>22. 在React中你有经常使用常量吗？</h2><p>在redux的action文件里面定义不同的行为可能会使用常量的形式。</p><hr><p>第 8 天（2022.3.7）</p><h2 id="23-为什么说React中的props是只读的？"><a href="#23-为什么说React中的props是只读的？" class="headerlink" title="23. 为什么说React中的props是只读的？"></a>23. 为什么说React中的props是只读的？</h2><p>往单向数据流上答：<br>保证react的单向数据流的设计模式，使状态更可预测。<br>如果允许自组件修改，那么一个父组件将状态传递给好几个子组件，这几个子组件随意修改，就完全不可预测，不知道在什么地方修改了状态。<br>所以我们必须像纯函数一样保护 props 不被修改</p><h2 id="24-如果组件的属性没有传值，那么它的默认值是什么？"><a href="#24-如果组件的属性没有传值，那么它的默认值是什么？" class="headerlink" title="24. 如果组件的属性没有传值，那么它的默认值是什么？"></a>24. 如果组件的属性没有传值，那么它的默认值是什么？</h2><p><a href="https://zh-hans.reactjs.org/docs/jsx-in-depth.html#props-default-to-true">官网</a>，如果你没给 prop 赋值，它的默认值是 true。以下两个 JSX 表达式是等价的：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">&lt;MyTextBox autocomplete /&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyTextBox</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&#123;true&#125;</span> /&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>通常，我们不建议不传递 value 给 prop，因为这可能与 ES6 对象简写混淆，{foo} 是 {foo: foo} 的简写，而不是 {foo: true}。这样实现只是为了保持和 HTML 中标签属性的行为一致。</p><h2 id="25-super-和super-props-有什么区别？"><a href="#25-super-和super-props-有什么区别？" class="headerlink" title="25. super()和super(props)有什么区别？"></a>25. <code>super()</code>和<code>super(props)</code>有什么区别？</h2><p>react 中的class 是基于es6的规范实现的, 继承是使用extends关键字实现继承的，子类必须在constructor()中调用super() 方法否则新建实例就会报错，报错的原因是 子类是没有自己的this对象的，它只能继承父类的this对象，然后对其进行加工，而super()就是将父类中的this对象继承给子类的，没有super() 子类就得不到this对象。</p><p>如果你使用了constructor就必须写super() 这个是用来初始化this的，可以绑定事件到this上<br>如果你想要在constructor中使用this.props,就必须给super添加参数 super(props)<br>注意，无论有没有 constructor，在render中的this.props都是可以使用的，这是react自动附带的<br>如果没有用到constructor 是可以不写的，react会默认添加一个空的constroctor.</p><p>super 指的是父类（即超类）的构造函数。</p><p>在调用父类的构造函数之前，你是不能在 constructor 中使用 this 关键字的.</p><p>参考 <a href="https://overreacted.io/zh-hans/why-do-we-write-super-props/">why-do-we-write-super-props</a></p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日常使用的容器镜像操作命令</title>
    <link href="/posts/25d325e2/"/>
    <url>/posts/25d325e2/</url>
    
    <content type="html"><![CDATA[<p>构建镜像</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker build -t user-manage:v1.0 .<br></code></pre></div></td></tr></table></figure><p>运行容器镜像</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker run --rm -d -p 8089:80 --name k8s-installer-test -v ~/gitlab/k8s-installer-ui/dist:/usr/share/nginx/html -v ~/default.conf:/etc/nginx/conf.d/default.conf nginx<br><br><span class="hljs-comment"># --rm container 停止后删除 container</span><br><span class="hljs-comment"># -d 后台运行容器</span><br><span class="hljs-comment"># -p 80:80 前者本地端口，后者是 dockerfile 暴露端口</span><br><span class="hljs-comment"># --name 指定容器名称</span><br><span class="hljs-comment"># -v 挂载替换容器内指定文件</span><br></code></pre></div></td></tr></table></figure><p>将镜像打成 tar 包</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker save user-manage:latest &gt; ~/Downloads/usermanage.tar<br></code></pre></div></td></tr></table></figure><p>上传 tar 包到指定服务器</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">scp ~/Downloads/usermanage.tar root@172.16.60.99:/tmp/<br></code></pre></div></td></tr></table></figure><p>从服务器下载 tar 包到本地</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">scp -r caas-aio:~/tmp/origin-web-console.tar ~/Downloads/<span class="hljs-built_in">test</span>/<br></code></pre></div></td></tr></table></figure><p>从 tar 包加载镜像</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker load &lt; /tmp/usermanage.tar<br><span class="hljs-comment"># 可以查看到</span><br>docker images <br></code></pre></div></td></tr></table></figure><p>给镜像重新打 tag</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker tag user-manage:latest docker.io/user-manage:latest<br></code></pre></div></td></tr></table></figure><p>进入容器内部</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 镜像 id</span><br>docker <span class="hljs-built_in">exec</span> -it 73bee1a2a355 /bin/bash<br><span class="hljs-comment"># 或者 /bin/sh</span><br></code></pre></div></td></tr></table></figure><p>查看镜像元数据，常用来查看 commit-id</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">docker inspect &lt;image-id&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
