{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"source/img/default.jpg","path":"img/default.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":0},{"_id":"source/img/useRef.png","path":"img/useRef.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"81c6d911f43085beb8c28478099c373a3314007c","modified":1642088124598},{"_id":"source/_posts/2022-01-13-useRef.md","hash":"43bc1395a5f13d15118e8778eada8dbf06083893","modified":1642088124598},{"_id":"source/img/useRef.png","hash":"ca711c0f3099cc42172cb5b0e72a322d7f6d3eae","modified":1642088124607},{"_id":"source/img/favicon.png","hash":"670adc91c1913f948e67bac8eedcc0bbf4f48c08","modified":1642088124607},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1642088123732},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1642088123732},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1642088123732},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1642088123733},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1642088123734},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"b32a2f76b01c44d4dfefa66a05e77a99d4ea5299","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1642088123734},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1642088123735},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"8a7f1534c228538e2ab56249d5a65829650170ed","modified":1642088123734},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1642088123740},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1642088123740},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"f3ae4395e751c4a02d5895e07856b1e8edfdda08","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1642088123740},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1642088123734},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1642088123741},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1642088123735},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1642088123734},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1642088123735},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1642088123735},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1642088123732},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1642088123735},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1642088123733},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1642088123733},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1642088123733},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1642088123733},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1642088123733},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1642088123733},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1642088123736},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1642088123736},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1642088123738},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1642088123738},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1642088123738},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1642088123739},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1642088123738},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"f7f3494ed001e8cdcdc3e8a1d2cd1195cff2ded5","modified":1642088123738},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1642088123740},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1642088123740},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1642088123740},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1642088123743},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1642088123744},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1642088123745},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1642088123745},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1642088123744},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1642088123745},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1642088123744},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1642088123745},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1642088123745},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1642088123744},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1642088123744},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1642088123740},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1642088123749},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1642088123749},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1642088123749},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1642088123750},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1642088123750},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1642088123750},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1642088123750},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1642088123750},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1642088123750},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1642088123751},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1642088123750},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1642088123751},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1642088123751},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1642088123751},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1642088123751},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1642088123751},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1642088123736},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1642088123736},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1642088123736},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1642088123737},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1642088123737},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1642088123737},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1642088123737},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1642088123737},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1642088123737},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1642088123737},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1642088123738},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"df6941bd3b860180d01fd39ee859ed2d42f4d1f0","modified":1642088123739},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"fd5fcb6a61ad865197a778eeae889b80484227dd","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1642088123739},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1642088123742},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1642088123739},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1642088123739},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1642088123745},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1642088123749},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1642088123745},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"08b455b848b21d57e0563b87071c4bae2b63bafe","modified":1642088123749},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"c2d8bfd04bf0734b387c049402b46a06a05fc582","modified":1642088123747},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"80098e8354069631bde8edcd1181a53091a92949","modified":1642088123747},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1642088123747},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1642088123747},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"a2993f23701de9a83e3f428300e62c5c52b4ff4b","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"5e86487de0f16c30ca3e16460ab94b57620e31c5","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1642088123748},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1642088123746},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1642088123747},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1642088123747},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1642088123747},{"_id":"source/img/default.jpg","hash":"6f055a8d36f6d015bea649dba935b87e535c37c4","modified":1642088124607},{"_id":"public/local-search.xml","hash":"df3e154758ad192f913750f2a882e99f4f9e4255","modified":1642088303357},{"_id":"public/about/index.html","hash":"4fc77a8a11b65c3932836508c34a459f93e540f5","modified":1642088303357},{"_id":"public/archives/2022/index.html","hash":"37de904c418a044d5c84c171de154a9c1f5069ac","modified":1642088303357},{"_id":"public/archives/index.html","hash":"98d678fce0f1f3d4d5ca87453221d3696ad26b5c","modified":1642088303357},{"_id":"public/archives/2022/01/index.html","hash":"20524352e8ef7fa762b14a41a13835f1abdab928","modified":1642088303357},{"_id":"public/categories/React/index.html","hash":"565b8e6bee98fd80ba01c4ca85786644005e2721","modified":1642088303357},{"_id":"public/index.html","hash":"c6e120e4ba3746ca7fa6fd5ea36b41e704d9d22f","modified":1642088303357},{"_id":"public/tags/React/index.html","hash":"c7ed7b4126943484321f518bfcc5fed824fbb3b1","modified":1642088303357},{"_id":"public/404.html","hash":"ecba683da2157037dfe696ae55749cceb293b4f1","modified":1642088303357},{"_id":"public/categories/index.html","hash":"af239470534f4cfce29c2b667b62dbf6eed45424","modified":1642088303357},{"_id":"public/2022/01/13/useRef/index.html","hash":"8c3b42a60e175dfa960b2f234c745fd63ab7c44d","modified":1642088303357},{"_id":"public/tags/index.html","hash":"86954d9f0feb0398ec5cf431de0d4ad092b12b99","modified":1642088303357},{"_id":"public/links/index.html","hash":"b012e0197cfbd6505f3c2fcb12874443d47e3dad","modified":1642088303357},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1642088303357},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1642088303357},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1642088303357},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1642088303357},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1642088303357},{"_id":"public/img/useRef.png","hash":"ca711c0f3099cc42172cb5b0e72a322d7f6d3eae","modified":1642088303357},{"_id":"public/img/favicon.png","hash":"670adc91c1913f948e67bac8eedcc0bbf4f48c08","modified":1642088303357},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1642088303357},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1642088303357},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1642088303357},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1642088303357},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1642088303357},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1642088303357},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1642088303357},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1642088303357},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1642088303357},{"_id":"public/css/main.css","hash":"63bc59b8ca4b03afa2b93883143c349d461b1052","modified":1642088303357},{"_id":"public/img/default.jpg","hash":"6f055a8d36f6d015bea649dba935b87e535c37c4","modified":1642088303357}],"Category":[{"name":"React","_id":"ckyd4z86e0002td3lco909w93"}],"Data":[],"Page":[{"title":"about","date":"2022-01-12T15:32:19.000Z","layout":"about","_content":"\n这里写关于页的正文，支持 Markdown, HTML\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-01-12 23:32:19\nlayout: about\n---\n\n这里写关于页的正文，支持 Markdown, HTML\n","updated":"2022-01-13T15:35:24.598Z","path":"about/index.html","comments":1,"_id":"ckyd4z8640000td3ld2hrgz97","content":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n","site":{"data":{}},"wordcount":25,"excerpt":"","more":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n"}],"Post":[{"title":"使用 useRef 跨生命周期保存变量","date":"2022-01-13T07:23:54.000Z","index_img":"/img/useRef.png","_content":"\nref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.\n\n当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。\n\n## 场景 1：只在更新时运行 useEffect\n\n使用一个可变的 ref 手动存储一个布尔值来表示是首次渲染还是后续渲染.\n\n```jsx\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  const prevCountRef = useRef(false);\n  useEffect(() => {\n    if (prevCountRef.current) {\n      console.log(\"只在更新时候执行\");\n    } else {\n      console.log(\"首次渲染执行\");\n      prevCountRef.current = true;\n    }\n  });\n\n  return (\n    <div>\n      <div>{count}</div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n```\n\n抽成自定义 hook：\n\n```jsx\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  const update = useUpdate();\n  console.log(update, \"是否更新\");\n\n  return (\n    <div>\n      <div>{count}</div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n\nfunction useUpdate() {\n  const ref = useRef(false);\n  useEffect(() => {\n    ref.current = true;\n  });\n  return ref.current;\n}\n```\n\n## 场景 2：获取上一轮的 props 或 state\n\n为什么 ref.current 拿到是上次的值？原因：\n\n1. useEffect 很重要的一点是：它是在每次渲染之后才会触发的，是延迟执行的。\n2. return 语句是同步的，所以 return 的时候，ref.current 还是旧值。\n3. 以下代码的执行顺序是 1 3 2\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  const prevCountRef = useRef();\n\n  console.log(\"1\", count);\n  useEffect(() => {\n    console.log(\"2.\", count);\n    prevCountRef.current = count;\n  });\n\n  const prevCount = prevCountRef.current;\n\n  console.log(`3.之前的状态: ${prevCount};现在状态: ${count}`);\n  return (\n    <div>\n      <div>{count}</div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n```\n\n抽取成自定义 Hook:\n\n```jsx\nexport default function usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n```\n\n## 场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题\n\n```jsx\nimport React, { useState, useEffect, useRef } from \"react\";\n\nconst RefComponent = () => {\n  // 使用 useState 存放和改变展示的 number\n  const [number, setNumber] = useState(0);\n  // 使用 useRef 生成一个独立的 ref 对象\n  // 在它的 current 属性单独存放一个展示的 number, 初始值为 0\n  const numRef = useRef(0);\n\n  function incrementAndDelayLogging() {\n    // 点击按钮 number + 1\n    setNumber(number + 1);\n    // 同时 ref 对象的 current 属性值也 + 1\n    numRef.current++;\n    // 定时器函数中产生了闭包, 这里 number 的是组件更新前的 number 对象, 所以值一直会滞后 1\n    setTimeout(() => alert(`state: ${number} | ref: ${numRef.current}`), 1000);\n  }\n\n  // 直接渲染的组件是正常情况, 可以获取到最新的 state,\n  // 所以 ref.current 和 state 存储的值显示一致\n  return (\n    <div>\n      <h1>solving closure by useRef</h1>\n      <button onClick={incrementAndDelayLogging}>alert in setTimeout</button>\n      <h4>state: {number}</h4>\n      <h4>ref: {numRef.current}</h4>\n    </div>\n  );\n};\n```\n","source":"_posts/2022-01-13-useRef.md","raw":"---\ntitle: 使用 useRef 跨生命周期保存变量\ndate: 2022-01-13 15:23:54\ntags: React\nindex_img: /img/useRef.png\ncategories: React\n---\n\nref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.\n\n当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。\n\n## 场景 1：只在更新时运行 useEffect\n\n使用一个可变的 ref 手动存储一个布尔值来表示是首次渲染还是后续渲染.\n\n```jsx\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  const prevCountRef = useRef(false);\n  useEffect(() => {\n    if (prevCountRef.current) {\n      console.log(\"只在更新时候执行\");\n    } else {\n      console.log(\"首次渲染执行\");\n      prevCountRef.current = true;\n    }\n  });\n\n  return (\n    <div>\n      <div>{count}</div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n```\n\n抽成自定义 hook：\n\n```jsx\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  const update = useUpdate();\n  console.log(update, \"是否更新\");\n\n  return (\n    <div>\n      <div>{count}</div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n\nfunction useUpdate() {\n  const ref = useRef(false);\n  useEffect(() => {\n    ref.current = true;\n  });\n  return ref.current;\n}\n```\n\n## 场景 2：获取上一轮的 props 或 state\n\n为什么 ref.current 拿到是上次的值？原因：\n\n1. useEffect 很重要的一点是：它是在每次渲染之后才会触发的，是延迟执行的。\n2. return 语句是同步的，所以 return 的时候，ref.current 还是旧值。\n3. 以下代码的执行顺序是 1 3 2\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  const prevCountRef = useRef();\n\n  console.log(\"1\", count);\n  useEffect(() => {\n    console.log(\"2.\", count);\n    prevCountRef.current = count;\n  });\n\n  const prevCount = prevCountRef.current;\n\n  console.log(`3.之前的状态: ${prevCount};现在状态: ${count}`);\n  return (\n    <div>\n      <div>{count}</div>\n      <button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n```\n\n抽取成自定义 Hook:\n\n```jsx\nexport default function usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n```\n\n## 场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题\n\n```jsx\nimport React, { useState, useEffect, useRef } from \"react\";\n\nconst RefComponent = () => {\n  // 使用 useState 存放和改变展示的 number\n  const [number, setNumber] = useState(0);\n  // 使用 useRef 生成一个独立的 ref 对象\n  // 在它的 current 属性单独存放一个展示的 number, 初始值为 0\n  const numRef = useRef(0);\n\n  function incrementAndDelayLogging() {\n    // 点击按钮 number + 1\n    setNumber(number + 1);\n    // 同时 ref 对象的 current 属性值也 + 1\n    numRef.current++;\n    // 定时器函数中产生了闭包, 这里 number 的是组件更新前的 number 对象, 所以值一直会滞后 1\n    setTimeout(() => alert(`state: ${number} | ref: ${numRef.current}`), 1000);\n  }\n\n  // 直接渲染的组件是正常情况, 可以获取到最新的 state,\n  // 所以 ref.current 和 state 存储的值显示一致\n  return (\n    <div>\n      <h1>solving closure by useRef</h1>\n      <button onClick={incrementAndDelayLogging}>alert in setTimeout</button>\n      <h4>state: {number}</h4>\n      <h4>ref: {numRef.current}</h4>\n    </div>\n  );\n};\n```\n","slug":"useRef","published":1,"updated":"2022-01-13T15:35:24.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyd4z86a0001td3l08uy0inq","content":"<p>ref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.</p>\n<p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p>\n<h2 id=\"场景-1：只在更新时运行-useEffect\"><a href=\"#场景-1：只在更新时运行-useEffect\" class=\"headerlink\" title=\"场景 1：只在更新时运行 useEffect\"></a>场景 1：只在更新时运行 useEffect</h2><p>使用一个可变的 ref 手动存储一个布尔值来表示是首次渲染还是后续渲染.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs jsx\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-keyword\">const</span> prevCountRef = useRef(<span class=\"hljs-literal\">false</span>);<br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (prevCountRef.current) &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;只在更新时候执行&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;首次渲染执行&quot;</span>);<br>      prevCountRef.current = <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>  &#125;);<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"xml\">          setCount(count + 1);</span><br><span class=\"xml\">        &#125;&#125;</span><br><span class=\"xml\">      &gt;</span><br><span class=\"xml\">        +</span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>抽成自定义 hook：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs jsx\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-keyword\">const</span> update = useUpdate();<br>  <span class=\"hljs-built_in\">console</span>.log(update, <span class=\"hljs-string\">&quot;是否更新&quot;</span>);<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"xml\">          setCount(count + 1);</span><br><span class=\"xml\">        &#125;&#125;</span><br><span class=\"xml\">      &gt;</span><br><span class=\"xml\">        +</span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useUpdate</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> ref = useRef(<span class=\"hljs-literal\">false</span>);<br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    ref.current = <span class=\"hljs-literal\">true</span>;<br>  &#125;);<br>  <span class=\"hljs-keyword\">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"场景-2：获取上一轮的-props-或-state\"><a href=\"#场景-2：获取上一轮的-props-或-state\" class=\"headerlink\" title=\"场景 2：获取上一轮的 props 或 state\"></a>场景 2：获取上一轮的 props 或 state</h2><p>为什么 ref.current 拿到是上次的值？原因：</p>\n<ol>\n<li>useEffect 很重要的一点是：它是在每次渲染之后才会触发的，是延迟执行的。</li>\n<li>return 语句是同步的，所以 return 的时候，ref.current 还是旧值。</li>\n<li>以下代码的执行顺序是 1 3 2</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs jsx\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-keyword\">const</span> prevCountRef = useRef();<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;1&quot;</span>, count);<br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;2.&quot;</span>, count);<br>    prevCountRef.current = count;<br>  &#125;);<br><br>  <span class=\"hljs-keyword\">const</span> prevCount = prevCountRef.current;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`3.之前的状态: <span class=\"hljs-subst\">$&#123;prevCount&#125;</span>;现在状态: <span class=\"hljs-subst\">$&#123;count&#125;</span>`</span>);<br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"xml\">          setCount(count + 1);</span><br><span class=\"xml\">        &#125;&#125;</span><br><span class=\"xml\">      &gt;</span><br><span class=\"xml\">        +</span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>抽取成自定义 Hook:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">usePrevious</span>(<span class=\"hljs-params\">value</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> ref = useRef();<br><br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    ref.current = value;<br>  &#125;, [value]);<br><br>  <span class=\"hljs-keyword\">return</span> ref.current;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"场景-3：-解决-hooks-时，由于异步闭包无法获取最新-state-的问题\"><a href=\"#场景-3：-解决-hooks-时，由于异步闭包无法获取最新-state-的问题\" class=\"headerlink\" title=\"场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题\"></a>场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React, &#123; useState, useEffect, useRef &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><br><span class=\"hljs-keyword\">const</span> RefComponent = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 使用 useState 存放和改变展示的 number</span><br>  <span class=\"hljs-keyword\">const</span> [number, setNumber] = useState(<span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-comment\">// 使用 useRef 生成一个独立的 ref 对象</span><br>  <span class=\"hljs-comment\">// 在它的 current 属性单独存放一个展示的 number, 初始值为 0</span><br>  <span class=\"hljs-keyword\">const</span> numRef = useRef(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">incrementAndDelayLogging</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 点击按钮 number + 1</span><br>    setNumber(number + <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-comment\">// 同时 ref 对象的 current 属性值也 + 1</span><br>    numRef.current++;<br>    <span class=\"hljs-comment\">// 定时器函数中产生了闭包, 这里 number 的是组件更新前的 number 对象, 所以值一直会滞后 1</span><br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> alert(<span class=\"hljs-string\">`state: <span class=\"hljs-subst\">$&#123;number&#125;</span> | ref: <span class=\"hljs-subst\">$&#123;numRef.current&#125;</span>`</span>), <span class=\"hljs-number\">1000</span>);<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 直接渲染的组件是正常情况, 可以获取到最新的 state,</span><br>  <span class=\"hljs-comment\">// 所以 ref.current 和 state 存储的值显示一致</span><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>solving closure by useRef<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;incrementAndDelayLogging&#125;</span>&gt;</span>alert in setTimeout<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>state: &#123;number&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>ref: &#123;numRef.current&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2888,"excerpt":"","more":"<p>ref 这一种访问 DOM 的主要方式。然而，useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式.</p>\n<p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p>\n<h2 id=\"场景-1：只在更新时运行-useEffect\"><a href=\"#场景-1：只在更新时运行-useEffect\" class=\"headerlink\" title=\"场景 1：只在更新时运行 useEffect\"></a>场景 1：只在更新时运行 useEffect</h2><p>使用一个可变的 ref 手动存储一个布尔值来表示是首次渲染还是后续渲染.</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-keyword\">const</span> prevCountRef = useRef(<span class=\"hljs-literal\">false</span>);<br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (prevCountRef.current) &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;只在更新时候执行&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;首次渲染执行&quot;</span>);<br>      prevCountRef.current = <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>  &#125;);<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"xml\">          setCount(count + 1);</span><br><span class=\"xml\">        &#125;&#125;</span><br><span class=\"xml\">      &gt;</span><br><span class=\"xml\">        +</span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>抽成自定义 hook：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-keyword\">const</span> update = useUpdate();<br>  <span class=\"hljs-built_in\">console</span>.log(update, <span class=\"hljs-string\">&quot;是否更新&quot;</span>);<br><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"xml\">          setCount(count + 1);</span><br><span class=\"xml\">        &#125;&#125;</span><br><span class=\"xml\">      &gt;</span><br><span class=\"xml\">        +</span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useUpdate</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> ref = useRef(<span class=\"hljs-literal\">false</span>);<br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    ref.current = <span class=\"hljs-literal\">true</span>;<br>  &#125;);<br>  <span class=\"hljs-keyword\">return</span> ref.current;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"场景-2：获取上一轮的-props-或-state\"><a href=\"#场景-2：获取上一轮的-props-或-state\" class=\"headerlink\" title=\"场景 2：获取上一轮的 props 或 state\"></a>场景 2：获取上一轮的 props 或 state</h2><p>为什么 ref.current 拿到是上次的值？原因：</p>\n<ol>\n<li>useEffect 很重要的一点是：它是在每次渲染之后才会触发的，是延迟执行的。</li>\n<li>return 语句是同步的，所以 return 的时候，ref.current 还是旧值。</li>\n<li>以下代码的执行顺序是 1 3 2</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-keyword\">const</span> prevCountRef = useRef();<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;1&quot;</span>, count);<br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;2.&quot;</span>, count);<br>    prevCountRef.current = count;<br>  &#125;);<br><br>  <span class=\"hljs-keyword\">const</span> prevCount = prevCountRef.current;<br><br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`3.之前的状态: <span class=\"hljs-subst\">$&#123;prevCount&#125;</span>;现在状态: <span class=\"hljs-subst\">$&#123;count&#125;</span>`</span>);<br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> &#123;</span><br><span class=\"xml\">          setCount(count + 1);</span><br><span class=\"xml\">        &#125;&#125;</span><br><span class=\"xml\">      &gt;</span><br><span class=\"xml\">        +</span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>抽取成自定义 Hook:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">usePrevious</span>(<span class=\"hljs-params\">value</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> ref = useRef();<br><br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    ref.current = value;<br>  &#125;, [value]);<br><br>  <span class=\"hljs-keyword\">return</span> ref.current;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"场景-3：-解决-hooks-时，由于异步闭包无法获取最新-state-的问题\"><a href=\"#场景-3：-解决-hooks-时，由于异步闭包无法获取最新-state-的问题\" class=\"headerlink\" title=\"场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题\"></a>场景 3： 解决 hooks 时，由于异步闭包无法获取最新 state 的问题</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React, &#123; useState, useEffect, useRef &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><br><span class=\"hljs-keyword\">const</span> RefComponent = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 使用 useState 存放和改变展示的 number</span><br>  <span class=\"hljs-keyword\">const</span> [number, setNumber] = useState(<span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-comment\">// 使用 useRef 生成一个独立的 ref 对象</span><br>  <span class=\"hljs-comment\">// 在它的 current 属性单独存放一个展示的 number, 初始值为 0</span><br>  <span class=\"hljs-keyword\">const</span> numRef = useRef(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">incrementAndDelayLogging</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 点击按钮 number + 1</span><br>    setNumber(number + <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-comment\">// 同时 ref 对象的 current 属性值也 + 1</span><br>    numRef.current++;<br>    <span class=\"hljs-comment\">// 定时器函数中产生了闭包, 这里 number 的是组件更新前的 number 对象, 所以值一直会滞后 1</span><br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> alert(<span class=\"hljs-string\">`state: <span class=\"hljs-subst\">$&#123;number&#125;</span> | ref: <span class=\"hljs-subst\">$&#123;numRef.current&#125;</span>`</span>), <span class=\"hljs-number\">1000</span>);<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 直接渲染的组件是正常情况, 可以获取到最新的 state,</span><br>  <span class=\"hljs-comment\">// 所以 ref.current 和 state 存储的值显示一致</span><br>  <span class=\"hljs-keyword\">return</span> (<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>solving closure by useRef<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;incrementAndDelayLogging&#125;</span>&gt;</span>alert in setTimeout<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>state: &#123;number&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>ref: &#123;numRef.current&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckyd4z86a0001td3l08uy0inq","category_id":"ckyd4z86e0002td3lco909w93","_id":"ckyd4z86g0005td3l0qeq32cm"}],"PostTag":[{"post_id":"ckyd4z86a0001td3l08uy0inq","tag_id":"ckyd4z86f0003td3l1nv99r4m","_id":"ckyd4z86g0004td3l14xlczst"}],"Tag":[{"name":"React","_id":"ckyd4z86f0003td3l1nv99r4m"}]}}